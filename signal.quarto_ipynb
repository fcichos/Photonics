{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Discussion about signal origin in o-PTIR measurements\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Preamble\n",
        "\n",
        "### Import packages\n"
      ],
      "id": "30a2bd0f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.colors import LinearSegmentedColormap\n",
        "import pandas as pd"
      ],
      "id": "d51277d7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Define colors\n"
      ],
      "id": "553954d6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Wong's Color Palette (2011) - Optimized for colorblindness\n",
        "WONG_COLORS = {\n",
        "    'black': '#000000',\n",
        "    'orange': '#E69F00',\n",
        "    'sky_blue': '#56B4E9',\n",
        "    'bluish_green': '#009E73',\n",
        "    'yellow': '#F0E442',\n",
        "    'blue': '#0072B2',\n",
        "    'vermillion': '#D55E00',\n",
        "    'reddish_purple': '#CC79A7'\n",
        "}\n",
        "\n",
        "# Another color palette\n",
        "CB_color_cycle = ['#377eb8', '#ff7f00', '#4daf4a',\n",
        "                  '#f781bf', '#a65628', '#984ea3',\n",
        "                  '#999999', '#e41a1c', '#dede00']"
      ],
      "id": "b5562619",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Define parameters for plotting\n"
      ],
      "id": "1b3686f0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "mm    = 1/25.4\n",
        "scale = 1.5\n",
        "\n",
        "%matplotlib inline"
      ],
      "id": "c62635db",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Import data\n",
        "\n",
        "Sources: https://omlc.org/spectra/water/abs/index.html //\n",
        "\n",
        "Irvine_Pollack_1968: W. M. Irvine and J. B. Pollack, \"Infrared optical properties of water and ice spheres,\" Icarus, 8, 324--360, (1968).\n",
        "\n",
        "Zolotarev_1969: V. M. Zolotarev, B. A. Mikhilov, L. L. Alperovich, and S. I. Popov,\"Dispersion and absorption of liquid water in the infrared and radio regions of the spectrum,\" Optics and Spectroscopy, 27, 430--432, (1969).\n",
        "\n",
        "Wieliczka_1989: D. M. Wieliczka and S. Weng and M. R. Querry, \"Wedge shaped cell for highly absorbent liquids: infrared optical constants of water\", Appl. Opt., 28, 1714--1719, (1989).\n"
      ],
      "id": "430a8eff"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "filename1 = \"Irvine_Pollack_1968.csv\"   # Headers: \"Lambda\", \"Absorption\"; units: \"nm\", \"1/cm\"\n",
        "filename2 = \"Zolotarev_1969.csv\"        # Headers: \"Lambda\", \"Absorption\"; units: \"nm\", \"1/cm\"\n",
        "filename3 = \"Wieliczka_1989.csv\"        # Headers: \"Wavelength\", \"Absorption\"; units:\n",
        "\n",
        "df1 = pd.read_csv(filename1)\n",
        "df2 = pd.read_csv(filename2)\n",
        "df3 = pd.read_csv(filename3)"
      ],
      "id": "bde4e7cc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Start calculating\n",
        "\n",
        "We consider the dynamic heat equation for an infrared beam with a large beam waist $\\Omega_{\\mathrm{IR}}$\n",
        "heating water and a single dissolved molecule.\n",
        "The molecule and water have different absorption cross sections\n",
        "denoted as $\\sigma_{\\mathrm{abs}}^{\\mathrm{(mol)}}$ and $\\sigma_{\\mathrm{abs}}^{\\mathrm{(water)}}$, respectively.\n",
        "The infrared intensity is modulated at an angular frequency $\\omega$.\n",
        "\n",
        "### Assumption\n",
        "\n",
        "The surrounding water is treated as an infinite medium with\n",
        "thermal condctivity $\\kappa$, mass density $\\rho$, and specific heat $c_{\\mathrm{p}}$.\n",
        "The thermal diffusicity is given through\n",
        "$$\n",
        "\\alpha = \\frac{\\kappa}{\\rho c_{\\mathrm{p}}}\n",
        "$$\n",
        "\n",
        "### Material characteristics of water\n",
        "\n",
        "Thermal conductivity $\\kappa = 0.598 \\text{ W} \\, \\text{m}^{-1} \\, \\text{K}^{-1}$ at 20°C\n",
        "Density $\\rho = 998.17 \\text{ kg} \\, \\text{m}^{-3}$ at 20°C\n",
        "Specific heat capacity $c_{\\mathrm{p}} = 4184 \\text{ J} \\, \\text{kg}^{-1} \\, \\text{K}^{-1}$ at 25°C\n"
      ],
      "id": "cbc6b205"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Source: https://webbook.nist.gov/cgi/fluid.cgi?P=0.1&TLow=&THigh=&TInc=&Digits=5&ID=C7732185&Action=Load&Type=IsoBar&TUnit=K&PUnit=MPa&DUnit=kg%2Fm3&HUnit=kJ%2Fkg&WUnit=m%2Fs&VisUnit=Pa*s&STUnit=N%2Fm&RefState=DEF\n",
        "# Temperature T = 293.13 K\n",
        "k_water   = 0.59829     # [W/m/K]\n",
        "rho_water = 998.17\t    # [kg/M^3]\n",
        "c_water   = 4183.9      # [J/kg/K]\n",
        "\n",
        "a_water   = k_water/rho_water/c_water\n",
        "print('The thermal diffusicity of water is $alpha$ = ' + str(np.round(a_water,11)) + ' m^2/s')"
      ],
      "id": "f5468f1f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Extended water heating term\n",
        "\n",
        "A homogenous medium (as water) is heated\n",
        "$$\n",
        "\\dot{Q}^{\\mathrm{water}} \\left( \\vec{r} \\right)\n",
        "$$\n",
        "The heating at location $\\vec{r}$ is determined by\n",
        "* the irradiance $I \\left( z \\right)$ at a distance $z$ away from the glass-water interface\n",
        "(water absorbs IR light and reduced the maximum possible irradiance)\n",
        "* the beam waist of the Gaussian beam\n",
        "(awyx from the beam waist the light is spread over a bigger cross section)\n",
        "\n",
        "\n",
        "However, for teh moment we will ignore the geometry of teh Gaussian beam and focus on teh water absoprtion.\n",
        "\n",
        "#### Absorption through water\n",
        "\n",
        "The total irradiance decreases exponentially the longer the light is traveling through water\n",
        "due to absorption in accord to (assuming the water film interface is at $z=0$)\n",
        "$$\n",
        "I \\left( z \\right) = I_0 \\exp \\left( - \\mu \\cdot z \\right) \\mathrm{.}\n",
        "$$\n",
        "There exists experimental data of the absorption coefficient of water which we use in teh following.\n"
      ],
      "id": "d907dcbd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig1, (ax) = plt.subplots(1, 1, figsize=(85*mm*scale, 65*mm*scale))\n",
        "ax.plot(df1[\"Lambda\"], df1[\"Absorption\"], color=WONG_COLORS['sky_blue'], label='Irvine_Pollack_1968')\n",
        "ax.plot(df2[\"Lambda\"], df2[\"Absorption\"], color=WONG_COLORS['bluish_green'], label='Zolotarev_1969')\n",
        "ax.plot(df3[\"Wavelength\"], df3[\"Absorption\"], color=WONG_COLORS['vermillion'], label='Wieliczka_1989')\n",
        "ax.set_title('Absorption of water')\n",
        "ax.set_xlabel('Wavelength [nm]')\n",
        "ax.set_ylabel('Absorption [cm${}^{-1}$]')\n",
        "ax.set_xlim(1000,8000)\n",
        "ax.legend()"
      ],
      "id": "1c3f49bd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig2, (bx) = plt.subplots(1, 1, figsize=(85*mm*scale, 65*mm*scale))\n",
        "bx.plot(1e7/df1[\"Lambda\"], df1[\"Absorption\"], color=WONG_COLORS['sky_blue'], label='Irvine_Pollack_1968')\n",
        "bx.plot(1e7/df2[\"Lambda\"], df2[\"Absorption\"], color=WONG_COLORS['bluish_green'], label='Zolotarev_1969')\n",
        "bx.plot(1e7/df3[\"Wavelength\"], df3[\"Absorption\"], color=WONG_COLORS['vermillion'], label='Wieliczka_1989')\n",
        "bx.set_title('Absorption of water')\n",
        "bx.set_xlabel('Wavenumber [cm${}^{-1}$]')\n",
        "bx.set_ylabel('Absorption [cm${}^{-1}$]')\n",
        "bx.set_xlim(100,5000)\n",
        "bx.invert_xaxis\n",
        "bx.legend()"
      ],
      "id": "039b491b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Absoprtion of water at a particular target wavenumber\n",
        "target_pmma = 1733      # [cm^-1] Wavenumber of typicel PMMA absorption\n",
        "height      = 1e-3      # [cm] film thickness, 10 µm = 1e-3 cm\n",
        "\n",
        "#Index of wavenumber array where target is closest to available data point\n",
        "index_pmma = np.abs(1e7/df3[\"Wavelength\"] - target_pmma).argmin()\n",
        "\n",
        "\n",
        "#print('Index for PMMA: ' + str(index_pmma))\n",
        "print('Lambert absorption coefficient of water at ' + str(target_pmma) + 'cm-1:'  + str(df3[\"Absorption\"][index_pmma]) + ' cm-1')\n",
        "\n",
        "print('Given a film thickness of ' + str(height) + ' cm, the product Absorption coefficient x Thickness equals ' + str(df3[\"Absorption\"][index_pmma]*height))\n",
        "print('The initial irradiance I0 is reduced by a factor  ' + str(np.round(np.exp(-df3[\"Absorption\"][index_pmma]*height),3)) + ' after 10 µm film')\n",
        "\n",
        "z = np.linspace(0,0.001,10)\n",
        "I = np.exp(-df3[\"Absorption\"][index_pmma]*z)\n",
        "\n",
        "mu_water = df3[\"Absorption\"][index_pmma]\n",
        "print('mu_water at 1733 cm-1: ' + str(mu_water) + ' 1/cm')\n",
        "mu_water = df3[\"Absorption\"][index_pmma]*100\n",
        "print('mu_water at 1733 cm-1: ' + str(mu_water) + ' 1/m')\n",
        "\n",
        "fig1, (ax) = plt.subplots(1, 1, figsize=(85*mm*scale, 56*mm*scale))\n",
        "ax.plot(z*1e4, I,'-', color=WONG_COLORS['sky_blue'], label='Reduced irradiance')\n",
        "ax.set_title(f'Remaining IR irradiance at {target_pmma}' + ' cm${}^{-1}$')\n",
        "ax.set_xlabel('Position in water film $z$ [µm]')\n",
        "ax.set_ylabel('Reduced irradiance $exp(-µ*z)$')\n",
        "ax.set_ylim(-0.05,1.05)\n",
        "# ax.vlines(0,0,1e-4)\n",
        "# ax.hlines(1.0,np.min(z),np.max(z))\n",
        "# ax.hlines(0.0,np.min(z),np.max(z))\n",
        "x_ticks = [0.0, 10.0]  # Custom x positions\n",
        "y_ticks = [0.0, np.exp(-df3[\"Absorption\"][index_pmma]*1e-3), 1.0]       # Custom y positions\n",
        "\n",
        "ax.set_xticks(x_ticks)\n",
        "ax.set_yticks(y_ticks)\n",
        "ax.grid(True,                # Turn on the grid\n",
        "        which='major',        # Show both major and minor gridlines\n",
        "        axis='both',         # Apply to both x and y axes\n",
        "        linestyle=':',       # Line style ('-', '--', ':', '-.')\n",
        "        linewidth=1.5,       # Width of grid lines\n",
        "        color='gray',        # Color of grid lines\n",
        "        alpha=0.7)           # Transparency (0.0 to 1.0)"
      ],
      "id": "deb0503d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Heating terms\n",
        "\n",
        "### Volume water heating\n",
        "\n",
        "For a thin water film of thickness $H$ we interpret $\\sigma_{\\mathrm{abs}}^{\\mathrm{water}}$ as raising for the effective attenuation\n",
        "$\\mu^{\\mathrm{water}} = \\varrho^{\\mathrm{water}} \\sigma_{\\mathrm{abs}}^{\\mathrm{water}}$,\n",
        "where $\\varrho^{\\mathrm{water}}$ is the number density of absorbing water molecules.\n",
        "\n",
        "$$\n",
        "\\begin{align}\n",
        "\\dot{Q}^{\\mathrm{water}} \\left(z\\right) &= I \\left( z\\right) \\sigma_{\\mathrm{abs}}^{\\mathrm{water}} \\mathcal{H} \\left(z-0 \\right) \\mathcal{H} \\left(H-z \\right)\\\\\n",
        "{}                                      &= I \\left( z\\right) \\mu^{\\mathrm{water}} \\mathcal{H} \\left(z-0 \\right) \\mathcal{H} \\left(H-z \\right) / \\varrho^{\\mathrm{water}}\n",
        "\\end{align}\n",
        "$$\n",
        "Units:\n",
        "* $\\left[ I                                         \\right] = \\mathrm{J} / \\left( \\mathrm{s} \\cdot \\mathrm{m}^2\\right)$\n",
        "* $\\left[ \\sigma_{\\mathrm{abs}}^{\\mathrm{water}}    \\right] = \\mathrm{m}^2$\n",
        "* $\\left[ \\mu_{\\mathrm{abs}}^{\\mathrm{water}}       \\right] = \\mathrm{m}^{-1}$\n",
        "* $\\left[ \\varrho_{\\mathrm{abs}}^{\\mathrm{water}}   \\right] = \\mathrm{m}^{-3}$\n",
        "* $\\left[ \\dot{Q}^{\\mathrm{water}}                  \\right] = \\mathrm{J} / \\mathrm{s}$ (unit of energy rate)\n",
        "\n",
        "\n",
        "For later calculations units of energy density rate will be more convenient and we transform the heating energy rate into a heating energy density rate\n",
        "$\\dot{q}^{\\mathrm{water}} \\left(z\\right)$,\n",
        "$$\n",
        "\\begin{align}\n",
        "\\dot{q}^{\\mathrm{water}} \\left(z\\right) &= \\dot{Q}^{\\mathrm{water}} \\left(z\\right) \\cdot \\varrho^{\\mathrm{water}} \\\\\n",
        "{}                                      &= I \\left( z\\right) \\mu^{\\mathrm{water}} \\mathcal{H} \\left(z-0 \\right) \\mathcal{H} \\left(H-z \\right)\n",
        "\\end{align}\n",
        "$$\n",
        "Units:\n",
        "* $\\left[ \\dot{q}^{\\mathrm{water}}                  \\right] = \\mathrm{J} / \\left( \\mathrm{s} \\mathrm{m}^3 \\right)$ (unit of energy density rate)   '\n",
        "\n",
        "Conversion:\n",
        "* Mass densbity of water $\\rho^{\\mathrm{water}} = 1000 \\, \\mathrm{ kg} \\, \\mathrm{m}^{-3}$\n",
        "* Molar mass of water $M^{\\mathrm{water}} = 18.015 \\, \\mathrm{ g} \\, \\mathrm{mol}^{-1}$\n",
        "* Avogadro constant $N_{\\mathrm{A}} = 6.022 \\cdot 10^{23} \\mathrm{ mol}^{-1}$\n",
        "+ Number density of water $\\varrho^{\\mathrm{water}} = N/V = N_{\\mathrm{A}} \\cdot \\rho^{\\mathrm{water}} / M^{\\mathrm{water}}$\n"
      ],
      "id": "3f2a89bd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "rho_water       = 1000          # [kg/m^3], mass density of water\n",
        "M_water         = 0.018015      # [kg/mol], molecular weight of water\n",
        "N_A             = 6.022e23      # [1/mol], avogadro constant\n",
        "\n",
        "# Number ensity of water, [1/m^3]\n",
        "varrho_water    = N_A*rho_water/M_water\n",
        "print('The number density of water molecules is ' + str(varrho_water) + ' 1/m^3')\n",
        "print('The number density of water molecules is ' + str(varrho_water*1e-6) + ' 1/cm^3')"
      ],
      "id": "e2b483d5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Locatlized molecule heating\n",
        "\n",
        "$$\n",
        "\\dot{q}^{\\mathrm{mol}} = I \\left( z \\right) \\sigma_{\\mathrm{abs}}^{\\mathrm{mol}} \\delta \\left( x-0 \\right) \\delta \\left( y-0 \\right) \\delta \\left( z-z_{\\mathrm{mol}} \\right)\n",
        "$$\n",
        "Units:\n",
        "* $\\left[ I \\right]                         = \\mathrm{J} / \\left( \\mathrm{s} \\cdot \\mathrm{m}^2\\right)$\n",
        "* $\\sigma_{\\mathrm{abs}}^{\\mathrm{mol}}     = \\mathrm{m}^2$\n",
        "* $ \\delta \\left( \\ldots \\right)            = \\mathrm{m}^{-1}$\n",
        "* $\\left[ \\dot{q}^{\\mathrm{mol}} \\right]    = \\mathrm{J} / \\left( \\mathrm{s} \\mathrm{m}^{-3} \\right)$ (unit of energy denisty rate)\n",
        "\n",
        "Without restcircting generality we can locate the particle at the position $x=0$ and $y=0$, and at any location $0\\le z \\le H$ inside the sample, if $z=0$ and $z=H$ represent the sample boundraries.\n",
        "\n",
        "### Overall heating\n",
        "We combine both heating terms and consider oscillatory heating with a frequency of $\\omega$\n",
        "as $I \\left(z, t \\right) = I \\left(y \\right) \\exp \\left( i \\omega t \\right)$ and get\n",
        "\n",
        "$$\n",
        "\\dot{q} = I \\left( z\\right) \\exp \\left( i \\omega t \\right)\n",
        "\\left[\n",
        "\\mu^{\\mathrm{water}}\\mathcal{H} \\left(z-0 \\right) \\mathcal{H} \\left(H-z \\right)\n",
        "+\n",
        "\\sigma_{\\mathrm{abs}}^{\\mathrm{mol}} \\delta \\left( x \\right) \\delta \\left( y\\right) \\delta \\left( z-z_{\\mathrm{mol}} \\right)\n",
        "\\right]\n",
        "$$\n",
        "\n",
        "## Heat equation\n",
        "\n",
        "The heat diffusion equation with a source term is given through\n",
        "$$\n",
        "\\frac{\\partial T}{\\partial t} = \\alpha \\nabla ^2 T + \\frac{1}{\\rho c_{\\mathrm{p}}} \\dot{q} \\left( \\vec{r}, t \\right) \\mathrm{.}\n",
        "$$\n",
        "\n",
        "Since the heating is periodic in time, we look for a solution of the form\n",
        "$$\n",
        "T \\left( \\vec{r},t \\right) = T_0 + \\real{\\left( \\Theta \\left( \\vec{r} \\right) \\exp \\left( i \\omega t \\right) \\right)} \\mathrm{,}\n",
        "$$\n",
        "where $T_0$ is the base temperature and $\\Theta \\left( \\vec{r} \\right)$ a complex amplitude.\n",
        "\n",
        "Substituting this ansatz into the heat equation yields\n",
        "$$\n",
        "i \\omega \\Theta \\left( \\vec{r} \\right) \\mathrm{e}^{i \\omega t} =\n",
        "    \\alpha \\mathrm{e}^{i \\omega t} \\nabla^2 \\Theta \\left( \\vec{r} \\right) +\n",
        "    \\frac{I \\left( z\\right)\\mathrm{e}^{i \\omega t}}{\\rho c_{\\mathrm{p}}}\n",
        "    \\left[\n",
        "        \\mu^{\\mathrm{water}} \\mathcal{H} \\left(z-0 \\right) \\mathcal{H} \\left(H-z \\right)\n",
        "        + \\sigma_{\\mathrm{abs}}^{\\mathrm{mol}} \\delta \\left( x \\right) \\delta \\left( y \\right) \\delta \\left( z-z_{\\mathrm{mol}} \\right)\n",
        "\\right]\n",
        "$$\n",
        "which we decompose into a water and molecule hetaing term\n",
        "$$\n",
        "\\Theta \\left( \\vec{r} \\right) = \\Theta^{\\mathrm{water}} \\left( \\vec{r} \\right) + \\Theta^{\\mathrm{mol}} \\left( \\vec{r} \\right)\n",
        "$$\n",
        "\n",
        "### Water heating term\n",
        "\n",
        "The water heating contribution reads as\n",
        "$$\n",
        "i \\omega \\Theta \\left( \\vec{r} \\right) - \\alpha \\nabla^2 \\Theta \\left( \\vec{r} \\right) =\n",
        "    \\frac{I_0 \\mathrm{e}^{- \\mu z}}{\\rho c_{\\mathrm{p}}} \\mu^{\\mathrm{water}} \\mathcal{H} \\left(z-0 \\right) \\mathcal{H} \\left(H-z \\right)\n",
        "$$\n",
        " ($I \\left( z \\right) = I_0 \\mathrm{e}^{- \\mu z}$).\n",
        " This equation is a linear, second order partial differential equation with constant coefficientions in space and a non-homogenous source term depending only on $z$. Thus, we can treat $x$ and $y$ independent from $z$.\n",
        "\n",
        "\n",
        "#### Fourier transform in $x$ and $y$\n",
        "\n",
        "The 2D Fourier transform in space cacan be defined as\n",
        "$$\n",
        "\\tilde{\\Theta} \\left( \\vec{k_{\\perp}}, z \\right) = \\int \\mathrm{d}x \\int \\mathrm{d}y \\; \\mathrm{e}^{-i \\vec{k_{\\perp}} \\vec{r_{\\perp}}} \\Theta \\left( \\vec{r_{\\perp}}, z\\right)\n",
        "$$\n",
        "with $\\vec{k_{\\perp}} = \\left( k_x, k_y \\right)^{\\mathrm{T}}$ which we use to transfor the differential equation\n",
        "$$\n",
        "i \\omega \\tilde{\\Theta} \\left( \\vec{k_{\\perp}}, z \\right) - \\alpha \\left(-\\vec{k_{\\perp}}^2 + \\frac{\\mathrm{d}}{\\mathrm{d}z} \\right) \\tilde{\\Theta} \\left( \\vec{k_{\\perp}}, z \\right) = \\tilde{S} \\left( \\vec{k_{\\perp}}, z \\right)\n",
        "$$\n",
        "with the Fourier transformed source term $ \\tilde{S}$. We can rewrite the differential euqation\n",
        "$$\n",
        "\\frac{\\mathrm{d}}{\\mathrm{d}z} \\tilde{\\Theta} \\left( \\vec{k_{\\perp}}, z \\right) - \\left(i \\frac{\\omega}{\\alpha} + \\vec{k_{\\perp}}^2 \\right) \\tilde{\\Theta} \\left( \\vec{k_{\\perp}}, z \\right)   = - \\frac{1}{\\alpha}\\tilde{S} \\left( \\vec{k_{\\perp}}, z \\right)\n",
        "$$\n",
        "\n",
        "\n",
        "The source term\n",
        "$$\n",
        "S \\left(x,y,z\\right) = \\frac{I_0 \\mathrm{e}^{-\\mu z}}{\\rho c_{\\mathrm{p}}}\n",
        "    \\mu^{\\mathrm{water}} \\mathcal{H} \\left(z-0 \\right) \\mathcal{H} \\left(H-z \\right)\n",
        "$$\n",
        "is independent of $x$ and $y$, which is why its 2 D Fourier transform is\n",
        "$$\n",
        "\\tilde{S} \\left( \\vec{k_{\\perp}}, z \\right)\n",
        "    = \\left( 2 \\pi \\right)^2 \\delta \\left( \\vec{k_{\\perp}} \\right)\n",
        "        \\frac{I_0 \\mathrm{e}^{-\\mu z}}{\\rho c_{\\mathrm{p}}}\n",
        "        \\mu^{\\mathrm{water}} \\mathcal{H} \\left(z-0 \\right) \\mathcal{H} \\left(H-z \\right)\n",
        "    = \\left( 2 \\pi \\right)^2 \\delta \\left( \\vec{k_{\\perp}} \\right) S_z \\left(z\\right)\n",
        "    \\mathrm{.}\n",
        "$$\n",
        "The only non-vanishing solution is for $\\vec{k_{\\perp}} = 0$, which also implies rotational symmetry around $z$.\n",
        "\n",
        "\n",
        "We can now solve the differential equation with an exponential source for $\\vec{k_{\\perp}}=0$ on $z \\in \\left[0;H\\right]$\n",
        "$$\n",
        "\\frac{\\mathrm{d}}{\\mathrm{d}z} \\tilde{\\Theta} \\left( z \\right) - i \\frac{\\omega}{\\alpha} \\tilde{\\Theta} \\left( z \\right)\n",
        "    = - \\frac{\\left( 2 \\pi \\right)^2}{\\alpha} \\frac{I_0 \\mathrm{e}^{-\\mu z}}{\\rho c_{\\mathrm{p}}} \\mu^{\\mathrm{water}}  \\mathrm{.}\n",
        "$$\n",
        "We define\n",
        "* $\\lambda^2 = i \\omega / \\alpha$\n",
        "* $f \\left( z \\right) =  \\frac{1}{\\alpha} \\frac{I_0 \\mathrm{e}^{-\\mu z}}{\\rho c_{\\mathrm{p}}} \\mu^{\\mathrm{water}}$\n",
        "which leads to the concise form\n",
        "$$\n",
        "\\frac{\\mathrm{d}}{\\mathrm{d}z} \\tilde{\\Theta} \\left( z \\right) - \\lambda^2 \\tilde{\\Theta} \\left( z \\right) = - f \\left( z \\right) \\mathrm{.}\n",
        "$$\n",
        "Therefor, we assume $\\tilde{\\Theta} \\left( z=0 \\right) = 0$ and $\\tilde{\\Theta} \\left( z=H \\right) = 0$.\n",
        "\n",
        "#### Solve the equation by means of Green's function\n",
        "\n",
        "The Green's function for\n",
        "$$\n",
        "\\left( \\frac{\\mathrm{d}}{\\mathrm{d}z} - \\lambda^2 \\right) G \\left( z,z^{\\prime} \\right) = \\delta \\left( z-z^{\\prime} \\right),\n",
        "    \\; \\mathrm{ with } \\; G \\left( 0,z^{\\prime} \\right)= G \\left( H,z^{\\prime} \\right) = 0\n",
        "$$\n",
        "is\n",
        "$$\n",
        "G \\left( z, z^{\\prime} \\right) = \\frac{1}{\\lambda \\sinh \\left( \\lambda H \\right)}\n",
        "\\begin{cases}\n",
        "\\sinh \\left(\\lambda z \\right)           \\sinh \\left(\\lambda \\left( H-z^{\\prime} \\right) \\right),    & \\mathrm{for} \\; z<z^{\\prime}\\\\\n",
        "\\sinh \\left(\\lambda z^{\\prime} \\right)  \\sinh \\left(\\lambda \\left( H-z \\right) \\right),             & \\mathrm{for} \\; z>z^{\\prime}\\\\\n",
        "\\end{cases}\n",
        "$$\n",
        "Then, the solution is\n",
        "$$\n",
        "\\tilde{\\Theta} \\left( z \\right) = - \\int_{z^{\\prime}=0}^{H} \\mathrm{d}z^{\\prime}  G \\left( z, z^{\\prime} \\right) f \\left( z^{\\prime} \\right)\n",
        "$$\n",
        "\n",
        "Note: the prefactor of $\\left( 2 \\pi \\right)^2$ in teh Fourier transform of teh source term is canceled during backtransform.\n",
        "\n",
        "$$\n",
        "\\Theta \\left( x,y,z \\right) =\n",
        "    - \\frac{I_0 \\mu^{\\mathrm{water}}}{\\rho c_{\\mathrm{p}} \\alpha} \\frac{1}{\\lambda \\sinh \\left( \\lambda H \\right)}\n",
        "    \\int_{z^{\\prime}=0}^{H} \\mathrm{d}z^{\\prime} \\mathrm{e}^{-\\mu z^{\\prime}}\n",
        "    \\begin{cases}\n",
        "        \\sinh \\left(\\lambda z \\right)           \\sinh \\left(\\lambda \\left( H-z^{\\prime} \\right) \\right),    & \\mathrm{for} \\; z<z^{\\prime}\\\\\n",
        "        \\sinh \\left(\\lambda z^{\\prime} \\right)  \\sinh \\left(\\lambda \\left( H-z \\right) \\right),             & \\mathrm{for} \\; z>z^{\\prime}\\\\\n",
        "    \\end{cases}\n",
        "$$\n",
        "\n",
        "We can calulate the integral piecewise.\n",
        "$$\n",
        "\\Theta \\left( x,y,z \\right) =\n",
        "    - \\frac{I_0 \\mu^{\\mathrm{water}}}{\\rho c_{\\mathrm{p}} \\alpha} \\frac{1}{\\lambda \\sinh \\left( \\lambda H \\right)}\n",
        "    \\begin{cases}\n",
        "        \\sinh \\left(\\lambda z \\right)\n",
        "        \\int_{z^{\\prime}=z}^{H} \\mathrm{d}z^{\\prime} \\mathrm{e}^{-\\mu z^{\\prime}}\n",
        "        \\sinh \\left(\\lambda \\left( H-z^{\\prime} \\right) \\right),                                    & \\mathrm{for} \\; z^{\\prime}>z\\\\\n",
        "        % % % % %\n",
        "        \\sinh \\left(\\lambda \\left( H-z \\right) \\right)\n",
        "        \\int_{z^{\\prime}=0}^{z} \\mathrm{d}z^{\\prime} \\mathrm{e}^{-\\mu z^{\\prime}}\n",
        "            \\sinh \\left(\\lambda z^{\\prime} \\right),                                                 & \\mathrm{for} \\; z^{\\prime}<z\\\\\n",
        "    \\end{cases}\n",
        "$$\n",
        "With $\\sinh \\left(\\lambda z \\right) = \\left(\\mathrm{e}^{\\lambda z}-\\mathrm{e}^{-\\lambda z}\\right)/2$ we can evaluate\n",
        "$$\n",
        "    \\int_{z^{\\prime}=z}^{H} \\mathrm{d}z^{\\prime} \\mathrm{e}^{-\\mu z^{\\prime}}\n",
        "    \\sinh \\left(\\lambda \\left( H-z^{\\prime} \\right) \\right)\n",
        "    =\n",
        "    \\frac{\\mathrm{e}^{-\\mu \\left(H+z\\right)}}{\\mu^2-\\lambda^2}\n",
        "    \\left[\n",
        "        \\lambda \\mathrm{e}^{\\mu z}\n",
        "        - \\lambda \\mathrm{e}^{\\mu H} \\cosh \\left( \\lambda\\left(H-z\\right) \\right)\n",
        "        + \\mu     \\mathrm{e}^{\\mu H} \\sinh \\left( \\lambda\\left(H-z\\right) \\right)\n",
        "    \\right]\n",
        "$$\n",
        "and\n",
        "$$\n",
        "\\int_{z^{\\prime}=0}^{z} \\mathrm{d}z^{\\prime} \\mathrm{e}^{-\\mu z^{\\prime}}\n",
        "    \\sinh \\left(\\lambda z^{\\prime} \\right)\n",
        "    =\n",
        "    \\frac{\\mathrm{e}^{-\\mu z}}{\\mu^2-\\lambda^2}\n",
        "    \\left[\n",
        "        \\lambda \\mathrm{e}^{\\mu z}\n",
        "        - \\lambda \\cosh \\left( \\lambda z \\right)\n",
        "        - \\mu     \\sinh \\left( \\lambda z \\right)\n",
        "    \\right]\n",
        "$$\n"
      ],
      "id": "56a1294d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "omega       = 2*np.pi*1e5                   # [1/s], we pump with 100 kHz\n",
        "lambda0     = np.sqrt(1j*omega/a_water)\n",
        "print('lambda: ' + str(lambda0))\n",
        "\n",
        "H           = 1e-5                          # [m], upper boundary in z, sample thickness 10 µm\n",
        "I_0         = 1                             # [J/(s*m^2)], for testing\n",
        "z           = np.linspace(0,1e-5,1000)       # Sample thickness 10 µm\n",
        "\n",
        "# Integral betwen z and H\n",
        "I_z_H   = (np.exp(-mu_water*(H+z)))/(mu_water**2-lambda0**2) * (lambda0*np.exp(mu_water*z) - lambda0*np.exp(mu_water*H)*np.cosh(lambda0*(H-z)) + mu_water*np.exp(mu_water*H)*np.sinh(lambda0*(H-z)) )\n",
        "# Integral between 0 and z\n",
        "I_0_z   = (np.exp(-mu_water*z))/(mu_water**2-lambda0**2) * (lambda0*np.exp(mu_water*z) - lambda0*np.cosh(lambda0*z) - mu_water*np.sinh(lambda0*z))\n",
        "\n",
        "fig0, (ax1,bx1) = plt.subplots(1, 2, figsize=(170*scale*mm, 56*scale*mm))\n",
        "ax1.plot(z*1e6, np.real(I_z_H),'-', color=WONG_COLORS['sky_blue'], label='Real part')\n",
        "ax1.set_title('Integral between $z$ and $H$')\n",
        "ax1.set_xlabel('$z$ position [µm]')\n",
        "ax1.set_ylabel('Integral value [unit of length]')\n",
        "ax1.hlines(0,np.min(z)*1e6,np.max(z)*1e6,linestyle=':', color=WONG_COLORS['sky_blue'])\n",
        "#\n",
        "ax2 = ax1.twinx()\n",
        "ax2.plot(z*1e6, np.imag(I_z_H),'-', color=WONG_COLORS['orange'], label='Imaginary part')\n",
        "ax2.hlines(0,np.min(z)*1e6,np.max(z)*1e6,linestyle=':', color=WONG_COLORS['orange'])\n",
        "ax2.set_ylabel('Integral value [unit of length]')\n",
        "###\n",
        "bx1.plot(z*1e6, np.real(I_0_z),'-', color=WONG_COLORS['sky_blue'], label='Real part')\n",
        "bx1.set_title('Integral between 0 and $z$')\n",
        "bx1.set_xlabel('$z$ position [µm]')\n",
        "bx1.set_ylabel('Integral value [unit of length]')\n",
        "bx1.hlines(0,np.min(z)*1e6,np.max(z)*1e6,linestyle=':', color=WONG_COLORS['sky_blue'])\n",
        "#\n",
        "bx2 = bx1.twinx()\n",
        "bx2.plot(z*1e6, np.imag(I_0_z),'-', color=WONG_COLORS['orange'], label='Imaginary part')\n",
        "bx2.hlines(0,np.min(z)*1e6,np.max(z)*1e6,linestyle=':', color=WONG_COLORS['orange'])\n",
        "bx2.set_ylabel('Integral value [unit of length]')\n",
        "fig0.legend(bbox_to_anchor=(0.85, 0.88))\n",
        "fig0.tight_layout()"
      ],
      "id": "9dcac1e7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "omega       = 2*np.pi*1e5                   # [1/s], we pump with 100 kHz\n",
        "lambda0     = np.sqrt(1j*omega/a_water)\n",
        "print('lambda: ' + str(lambda0))\n",
        "\n",
        "H           = 1e-5                          # [m], upper boundary in z, sample thickness 10 µm\n",
        "I_0         = 1                             # [J/(s*m^2)], for testing\n",
        "z           = np.linspace(0,1e-5,1000)       # Sample thickness 10 µm\n",
        "\n",
        "# Integral betwen z and H\n",
        "I_z_H   = (np.exp(-mu_water*(H+z)))/(mu_water**2-lambda0**2) * (lambda0*np.exp(mu_water*z) - lambda0*np.exp(mu_water*H)*np.cosh(lambda0*(H-z)) + mu_water*np.exp(mu_water*H)*np.sinh(lambda0*(H-z)) )\n",
        "# Integral between 0 and z\n",
        "I_0_z   = (np.exp(-mu_water*z))/(mu_water**2-lambda0**2) * (lambda0*np.exp(mu_water*z) - lambda0*np.cosh(lambda0*z) - mu_water*np.sinh(lambda0*z))\n",
        "\n",
        "Q_z_H = -I_0*mu_water/(rho_water*c_water*a_water)/(lambda0*np.sinh(lambda0*H))*I_z_H\n",
        "Q_0_z = -I_0*mu_water/(rho_water*c_water*a_water)/(lambda0*np.sinh(lambda0*H))*I_0_z\n",
        "\n",
        "\n",
        "fig0, (ax1,bx1) = plt.subplots(1, 2, figsize=(170*scale*mm, 56*scale*mm))\n",
        "ax1.plot(z*1e6, np.real(Q_z_H),'-', color=WONG_COLORS['sky_blue'], label='Real part')\n",
        "ax1.set_title('Q_value between $z$ and $H$')\n",
        "ax1.set_xlabel('$z$ position [µm]')\n",
        "ax1.set_ylabel('Q value [K/s]')\n",
        "ax1.hlines(0,np.min(z)*1e6,np.max(z)*1e6,linestyle=':', color=WONG_COLORS['sky_blue'])\n",
        "#\n",
        "ax2 = ax1.twinx()\n",
        "ax2.plot(z*1e6, np.imag(Q_z_H),'-', color=WONG_COLORS['orange'], label='Imaginary part')\n",
        "ax2.hlines(0,np.min(z)*1e6,np.max(z)*1e6,linestyle=':', color=WONG_COLORS['orange'])\n",
        "ax2.set_ylabel('Q value [K/s]')\n",
        "# ###\n",
        "bx1.plot(z*1e6, np.real(Q_0_z),'-', color=WONG_COLORS['sky_blue'], label='Real part')\n",
        "bx1.set_title('Q value between 0 and $z$')\n",
        "bx1.set_xlabel('$z$ position [µm]')\n",
        "bx1.set_ylabel('Q value [K/s]')\n",
        "bx1.hlines(0,np.min(z)*1e6,np.max(z)*1e6,linestyle=':', color=WONG_COLORS['sky_blue'])\n",
        "# #\n",
        "bx2 = bx1.twinx()\n",
        "bx2.plot(z*1e6, np.imag(Q_0_z),'-', color=WONG_COLORS['orange'], label='Imaginary part')\n",
        "bx2.hlines(0,np.min(z)*1e6,np.max(z)*1e6,linestyle=':', color=WONG_COLORS['orange'])\n",
        "bx2.set_ylabel('Q value [K/s]')\n",
        "fig0.legend(bbox_to_anchor=(0.85, 0.88))\n",
        "fig0.tight_layout()"
      ],
      "id": "e098db8d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Moleculer heating term\n",
        "\n",
        "The heating term due the molecule is given through\n",
        "$$\n",
        "i \\omega \\Theta \\left( \\vec{r} \\right) =\n",
        "    \\alpha \\nabla^2 \\Theta \\left( \\vec{r} \\right) +\n",
        "    \\frac{I_0 \\mathrm{e}^{-\\mu z}}{\\rho c_{\\mathrm{p}}}\n",
        "    \\sigma_{\\mathrm{abs}}^{\\mathrm{mol}} \\delta \\left( x \\right) \\delta \\left( y \\right) \\delta \\left( z-z_{\\mathrm{mol}} \\right)\n",
        "    \\mathrm{.}\n",
        "$$\n",
        "\n",
        "We can solve this problem by mean sof the Green's function for the slab ($x,y \\in \\left(-\\infty;\\infty\\right)$ and $z\\in \\left[0;H\\right]$)\n",
        "with Dirichlet boundary conditions ($\\Theta \\left(z=0\\right)=\\Theta\\left(z=H\\right) = 0$).\n",
        "In the case of the equation\n",
        "$$\n",
        "\\left( i \\omega - \\alpha \\nabla^2\\right) G \\left( \\vec{r}, \\vec{r^{\\prime}} \\right) = \\delta \\left( \\vec{r} - \\vec{r^{\\prime}} \\right)\n",
        "$$\n",
        "with $G \\left( z=0, \\vec{r^{\\prime}} \\right) = G \\left( z=H, \\vec{r^{\\prime}} \\right) = 0$,\n",
        "the solution is\n",
        "$$\n",
        "\\Theta \\left( \\vec{r} \\right) = \\frac{I_0 \\mathrm{e}^{-\\mu z_{\\mathrm{mol}}}}{\\rho c_{\\mathrm{p}}} \\sigma_{\\mathrm{abs}}^{\\mathrm{mol}} G \\left( \\vec{r}, \\vec{r_0} \\right)\n",
        "$$\n",
        "\n",
        "As before $x$ and $y$ are independent and unbounded. Thus, we perform a 2 Fourier transform\n",
        "$$\n",
        "G \\left( \\vec{r}, \\vec{r^{\\prime}} \\right)\n",
        "    = \\int \\mathrm{d}k_x \\int \\mathrm{d}k_y \\; \\frac{1}{\\left(2\\pi\\right)^2} \\mathrm{e}^{i \\vec{k}_{\\perp} \\left( \\vec{r}_{\\perp} - \\vec{r}_{\\perp}^{\\prime} \\right)}\n",
        "    \\tilde{G}_{\\vec{k}\\perp} \\left( z,z^{\\prime}\\right)\n",
        "$$\n",
        "with $\\tilde{G}_{\\vec{k}\\perp} \\left( z,z^{\\prime}\\right)$\n",
        "as Green’s function in Fourier space in transverse direction, but still in real space along the $z$ direction.\n",
        "The Green's function satisfies\n",
        "$$\n",
        "\\left( \\frac{\\mathrm{d}}{\\mathrm{d}z} - \\vec{k}_{\\perp}^2 +i \\frac{\\omega}{\\alpha}\\right) \\tilde{G}_{\\vec{k}\\perp} \\left( z,z^{\\prime}\\right)\n",
        "=\n",
        "-\\frac{1}{\\alpha} \\delta \\left( z-z^{\\prime} \\right)\n",
        "$$\n",
        "with $\\tilde{G} \\left( z=0, \\vec{r^{\\prime}} \\right) = \\tilde{G} \\left( z=H, \\vec{r^{\\prime}} \\right) = 0$.\n",
        "We can introduce\n",
        "* $\\Lambda^2 = \\vec{k}_{\\perp}^2 - i \\frac{\\omega}{\\alpha}$\n",
        "and solve the differential euqation\n",
        "$$\n",
        "\\tilde{G} \\left( z, z^{\\prime} \\right) = \\frac{1}{\\alpha \\Lambda \\sinh \\left( \\Lambda H\\right)}\n",
        "\\begin{cases}\n",
        "\\sinh \\left(\\Lambda z \\right)           \\sinh \\left(\\Lambda \\left( H-z^{\\prime} \\right) \\right),    & \\mathrm{for} \\; z<z^{\\prime}\\\\\n",
        "\\sinh \\left(\\Lambda z^{\\prime} \\right)  \\sinh \\left(\\Lambda \\left( H-z \\right) \\right),             & \\mathrm{for} \\; z>z^{\\prime}\\\\\n",
        "\\end{cases}\n",
        "$$\n",
        "As we set with the Dirac delta distribution $\\vec{r}_{\\perp} = 0$ and $z^{\\prime} = z^{\\mathrm{mol}}$ and get the solution\n",
        "$$\n",
        "\\Theta \\left( \\vec{r} \\right) = \\frac{I_0 \\mathrm{e}^{-\\mu z^{\\mathrm{mol}}}}{\\rho c_{\\mathrm{p}}} \\sigma_{\\mathrm{abs}}^{\\mathrm{mol}}\n",
        "\\int \\mathrm{d}k_x \\int \\mathrm{d}k_y \\; \\frac{1}{\\left(2\\pi\\right)^2} \\mathrm{e}^{i \\vec{k}_{\\perp} \\vec{r}_{\\perp}}\n",
        "    \\tilde{G}_{\\vec{k}\\perp} \\left( z,z^{\\mathrm{mol}}\\right)\n",
        "$$\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "$$\n",
        "F(r,z,z_{\\mathrm{mol}}) = \\frac{1}{4\\pi\\alpha} \\sum_{n=-\\infty}^{\\infty} \\left[\n",
        "K_0\\left(\\sqrt{\\frac{i\\omega}{\\alpha}}|r_n|\\right) - K_0\\left(\\sqrt{\\frac{i\\omega}{\\alpha}}|r'_n|\\right)\n",
        "\\right]\n",
        "$$"
      ],
      "id": "32cf7bcd"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/fci/Library/Jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}