{
  "hash": "f31a1940c48d92333cdcf886347fb4d3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Multiple Wave Interference\njupyter: python3\nformat:\n  html:\n    code-fold: true\ncrossref:\n  fig-title: Figure     # (default is \"Figure\")\n  tbl-title: Tbl     # (default is \"Table\")\n  title-delim: \"—\"   # (default is \":\")\n  fig-prefix: \"Figure\"\n  eq-prefix: Eq.\n  chapters: true\n---\n\n\n\nSo far we looked at the interference of two waves, which was a simplification as I mentioned already earlier. Commonly there will be a multitude of partial waves contribute to the oberved intereference. This is what we would like to have a look at now. We will do that in a quite general fashion, as the resulting formulas will appear several times again for different problems.\n\nNevertheless we will make a difference between\n\n- multiwave interference of waves with the constant amplitude\n- multiwave interference of waves with decreasing amplitude\n\nEspecially the latter is often occuring, if we have multiple reflections and each reflection is only a fraction of the incident amplitude.\n\n\n### Multiple Wave Interference with Constant Amplitude\n\nIn the case of constant amplitude (for example realized by a grating, which we talk about later), the total wave amplitude is given according to the picture below by\n\n$$\nU=U_1+U_2+U_1+U_3+\\ldots+U_M\n$$\n\nwhere we sum the amplitude over $M$ partial waves. Between the neighboring waves (e.g. $U_1$ and $U_2$), we will assume a phase difference (because of a path length difference for example), which we denote as $\\Delta \\phi$.\n\nThe amplitude of the p-th wave is then given by\n\n$$\nU_p=\\sqrt{I_0}e^{i(p-1)\\Delta \\phi}\n$$\n\nwith the index $p$ being an interger $p=1,2,\\ldots,M$, $h=e^{i\\Delta \\phi}$ and $\\sqrt{I_0}$ as the amplitude of each individual wave. The total amplitude $U$ can be then expressed as\n\n$$\nU=\\sqrt{I_0}\\left (1+h+h^2+\\ldots +h^{M-1}\\right)\n$$\n\nwhich is a geometric sum. We can apply the sum formula for geometric sums to obtain\n\n$$\nU=\\sqrt{I_0}\\frac{1-h^M}{1-h}=\\sqrt{I_0}\\frac{1-e^{iM\\Delta \\phi}}{1-e^{i\\Delta \\phi}}\n$$\n\nWe now have to calculate the intensity of the total amplitude\n\n$$\nI=|U|^2=I_{0}\\left | \\frac{e^{-iM\\Delta \\phi/2}-e^{iM\\Delta \\phi/2}}{e^{-i\\Delta \\phi/2}-e^{i\\Delta \\phi/2}}\\right |^2\n$$\n\nwhich we can further simplify to give\n\n$$\nI=I_{0}\\frac{\\sin^2(M\\Delta \\phi/2)}{\\sin^2(\\Delta \\phi/2)}\n$$\n\n::: {#figure-md layout-ncol=2}\n\n::: {#bc65ec49 .cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\n# Parameters\nM = 6  # number of phasors\nphi = np.pi/8  # example phase difference between successive phasors\n\ndef plot_angle(ax, pos, angle, length=0.95, acol=\"C0\", **kwargs):\n    vec2 = np.array([np.cos(np.deg2rad(angle)), np.sin(np.deg2rad(angle))])\n    xy = np.c_[[length, 0], [0, 0], vec2*length].T + np.array(pos)\n    ax.plot(*xy.T, color=acol)\n    return AngleAnnotation(pos, xy[0], xy[2], ax=ax, **kwargs)\n\n# Calculate phasor positions\ndef calculate_phasors(phi, M):\n    # Initialize arrays for arrow start and end points\n    x_start = np.zeros(M)\n    y_start = np.zeros(M)\n    x_end = np.zeros(M)\n    y_end = np.zeros(M)\n\n    # Running sum of phasors\n    x_sum = 0\n    y_sum = 0\n\n    for i in range(M):\n        # Current phasor\n        x = np.cos(i * phi)\n        y = np.sin(i * phi)\n\n        # Store start point (end of previous phasor)\n        x_start[i] = x_sum\n        y_start[i] = y_sum\n\n        # Add current phasor\n        x_sum += x\n        y_sum += y\n\n        # Store end point\n        x_end[i] = x_sum\n        y_end[i] = y_sum\n\n    return x_start, y_start, x_end, y_end\n\nx_start, y_start, x_end, y_end = calculate_phasors(phi, M)\n\nplt.figure(figsize=get_size(6, 6))\nax = plt.gca()\n\nfor i in range(M):\n    plt.arrow(x_start[i], y_start[i],\n             x_end[i]-x_start[i], y_end[i]-y_start[i],\n             head_width=0.15, head_length=0.2, fc='k', ec='k',\n             length_includes_head=True,\n             label=f'E{i+1}' if i == 0 else \"\")\n\nplt.arrow(0, 0, x_end[-1], y_end[-1],\n         head_width=0.15, head_length=0.2, fc='r', ec='r',\n         length_includes_head=True, label='Resultant')\n\nax.set_aspect('equal')\nxx = np.linspace(-1, 3, 100)\nax.plot(xx,(xx-1)*np.tan(phi),'k--',lw=0.5)\nax.plot([1,3],[0,0],'k--',lw=0.5)\nkw = dict(size=195, unit=\"points\", text=r\"$\\Delta \\phi$\")\nplot_angle(ax, (1.0, 0), phi*180/np.pi, textposition=\"inside\", **kw)\nplt.axis('off')\nmax_range = max(abs(x_end[-1]), abs(y_end[-1])) * 1.2\nplt.xlim(-0, max_range/1.5)\nplt.ylim(-0.1, max_range/1.)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Multiple wave interference of $M=6$ waves with a phase difference of $\\phi=\\pi/8$. The black arrows represent the individual waves, the red arrow the sum of all waves.](MultiWave Interference_files/figure-html/cell-3-output-1.png){width=142 height=194}\n:::\n:::\n\n\n::: {#cell-fig-multibeam2 .cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\n# Parameters\nM = 6\nphi = np.linspace(-4*np.pi, 4*np.pi, 10000)  # increased resolution\nI0 = 1\n\ndef multiple_beam_pattern(phi, M):\n    numerator = np.sin(M * phi/2)**2\n    denominator = np.sin(phi/2)**2\n    I = np.where(denominator != 0, numerator/denominator, M**2)\n    return I\n\nI = I0 * multiple_beam_pattern(phi, M)\n\nfirst_min = 2*np.pi/M  # theoretical value\n\ndef find_nearest(array, value):\n    array = np.asarray(array)\n    idx = (np.abs(array - value)).argmin()\n    return array[idx], idx\n\nhalf_max = M**2/2\n\nphi_positive = phi[phi >= 0]  # only positive values\nI_positive = I[phi >= 0]\n_, idx_half = find_nearest(I_positive, half_max)\nhalf_width = phi_positive[idx_half]\n\n# Create plot\nplt.figure(figsize=get_size(10, 6))\nplt.plot(phi/np.pi, I, 'b-', label=f'M={M}')\n\n#plt.plot(first_min/np.pi, multiple_beam_pattern(first_min, M), 'ro')\n#plt.annotate(f'First minimum\\nφ = 2π/M = {first_min/np.pi:.2f}π',\n\nplt.axvline(x=first_min/np.pi, color='r', linestyle='--', label=f'φ = 2π/M = {first_min/np.pi:.2f}π')\n\n#plt.plot(half_width/np.pi, half_max, 'go')\n\nplt.xlabel(r'phase $\\Delta \\phi/\\pi$')\nplt.ylabel('intensity I/I₀')\nplt.title(f'Multiple Beam Interference Pattern (M={M})')\nplt.ylim(0, M**2 + 15)\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Multiple beam interference pattern for M=6 beams. The intensity distribution is shown as a function of the phase shift $\\phi$. The first minimum is at $\\phi=2\\pi/M$. The intensity distribution is symmetric around $\\phi=0$.](MultiWave Interference_files/figure-html/fig-multibeam2-output-1.png){#fig-multibeam2 width=345 height=241 fig-align='center'}\n:::\n:::\n\n\n:::\n\nThe result is therefore an oscillating function. The numerator $\\sin^2(M\\Delta \\phi/2)$ shows and oscillation frequency, which is by a factor of $M$ higher than the one in the denominator $\\sin^2 (\\Delta \\phi/2)$.\nTherefore the intensity pattern is oscillating rapidly and creating a first minimum at\n\n$$\n\\Delta \\phi=\\frac{2\\pi}{M}\n$$\n\nThis is an important result, since it shows that the number of sources $M$ determines the position of the first minimum and the interference peak gets narrower with increasing $M$. Since the phase difference $\\Delta \\phi$ between neighboring sources is the same as for the double slit experiment, i.e. $\\Delta \\phi=2\\pi d/\\lambda \\sin(\\theta)$, we can also determine the angular position of the first minimum. This is given by\n\n$$\n\\sin(\\theta_\\textrm{min})=\\frac{1}{M}\\frac{\\lambda}{d}\n$$\n\nThis again has the common feature that it scales as $\\lambda/d$.\nA special situation occurs, whenever the numerator and the denominator become zero. This will happen whenever\n\n$$\n\\Delta \\phi=m 2\\pi\n$$\n\nwhere $m$ is an integer and denotes the interference order, i.e. the number of wavelength that neighboring partial waves have as path length difference.\nIn this case, the intensity distributiion will give us\n\n$$\nI=I_0 \\frac{0}{0}\n$$\n\nand we have to determine the limit with the help of l'Hospitals rule. The outcome of this calculation is, that\n\n$$\nI(\\Delta \\phi=m2\\Delta \\pi)=M^2 I_0\n$$\n\nwhich can be also realized when using the small angle approximation for the sine functions.\n\n#### Wavevector Representation\n\nWe would like to introduce a different representation of the multiple wave interference of the grating, which is quite insightful.\nThe first order ($m=1$) constructive interference condition is given by\n\n$$\n\\frac{1}{\\lambda}\\sin{\\theta}= \\frac{1}{d}\n$$\n\nwhich also means that\n\n$$\n\\frac{2\\pi}{\\lambda}\\sin{\\theta}= \\frac{2\\pi}{d}\n$$\n\nThis can be written as\n\n$$\nk \\sin{\\theta}= K\n$$\n\nwhere $k$ is the magnitude of the wavevector of the light and $K$ is the wavevector magnitude that corresponds to the grating period $d$. As the magnitude of the wavevector of the light is conserved, the wavevectors of the incident light and the light traveling along the direction of the first interence peak form the sides of an equilateral triangle. This is shown in the following figure.\n\n::: {#e19c7329 .cell execution_count=4}\n``` {.python .cell-code code-fold=\"true\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nk = 1  # Magnitude of k₁ and k₂\n\norigin = np.array([0, 0])\n\nk1 = np.array([k, 0])\n\ntheta_deg = 30  # θ = 30 degrees\ntheta_rad = np.deg2rad(theta_deg)\n\nk2 = k * np.array([np.cos(theta_rad), np.sin(theta_rad)])\n\nK = k2 - k1\n\npoint_O = origin\npoint_A = point_O + k1\npoint_B = point_O + k2\n\n\nplt.figure(figsize=get_size(10, 10))\nax = plt.gca()\n\n# Plot vector k₁\nax.arrow(point_O[0], point_O[1], k1[0], k1[1],\n         head_width=0.02, head_length=0.03, fc='k', ec='k', length_includes_head=True)\n\n\nax.arrow(point_A[0], point_A[1], K[0], K[1],\n         head_width=0.02, head_length=0.03, fc='b', ec='b', length_includes_head=True)\n\nax.arrow(point_O[0], point_O[1], k2[0], k2[1],\n         head_width=0.02, head_length=0.03, fc='k', ec='k', length_includes_head=True)\n\n# Label vectors\nax.text(k1[0]/2 - 0.05, k1[1]/2 - 0.05, r'$\\mathbf{k}$', fontsize=14, color='k')\nax.text(point_A[0] + K[0]/2 , point_A[1] + K[1]/2 + 0.05, r'$\\mathbf{K}$', fontsize=14, color='b')\nax.text(k2[0]/2 + 0.0, k2[1]/2+0.1, r'$\\mathbf{k}$', fontsize=14, color='k')\n\n# Indicate angle θ between k₁ and k₂ at the origin\narc_radius = 0.3  # Radius of the arc representing θ\nangle_range = np.linspace(0, theta_rad, 100)\narc_x = arc_radius * np.cos(angle_range)\narc_y = arc_radius * np.sin(angle_range)\nax.plot(arc_x, arc_y, color='k')\n\nax.text(arc_radius * np.cos(theta_rad / 2) + 0.02,\n        arc_radius * np.sin(theta_rad / 2) + 0.02,\n        r'$\\theta$', fontsize=14)\n\n# Set equal aspect ratio\nax.set_aspect('equal', adjustable='box')\n\nall_x = [point_O[0], point_A[0], point_B[0]]\nall_y = [point_O[1], point_A[1], point_B[1]]\nmargin = 0.2\nax.set_xlim(min(all_x) - margin, max(all_x) + margin)\nax.set_ylim(min(all_y) - margin, max(all_y) + margin)\nplt.axis('off')\n\n# Display the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Wavevector summation for the diffraction grating. The wavevector of the incident light $k$ and the wavevector of the light traveling along the direction of the first interference peak $K$ form an equilateral triangle.](MultiWave Interference_files/figure-html/cell-5-output-1.png){width=312 height=208 fig-align='center'}\n:::\n:::\n\n\nThis means that the diffraction grating is providing a wavevector $K$ to alter the direction of the incident light. This is again a common feature reappearing in many situations as for example in the X-ray diffraction of crystals.\n\n\n::: {.callout-note collapse=true}\n### Multiple Wave Interference with Decreasing Amplitude\n\nWe will turn our attention now to a slight modification of the previous multiwave interference. We will introduce a decreasing amplitude of the individual waves. The first wave shall have an amplitude $U_1=\\sqrt{I_0}$. The next wave, however, will not only be phase shifted but also have a smaller amplitude.\n\n$$\nU_2=h U_1\n$$\n\nwhere $h=re^{i\\phi}$ with $|h|=r<1$. $r$ can be regarded as a reflection coefficient, which deminishes the amplitude of the incident wave. According to that the intensity is reduced by\n\n$$\nI_2=|U_2|^2=|h U_1|^2=r^2 I_1\n$$\n\nThe intensity of the incident wave is multiplied by a  factor $r^2$, while the amplitude is multiplied by $r$. Note that the phase factor $e^{i\\Delta\\phi}$ is removed when taking the square of this complex number.\n\n::: {.callout-note}\n## Intensity at Boundaries\n\nThe amplitude of the reflected wave is diminished by a factor\n$r\\le 1$, which is called the reflection coefficient. The intensity is diminished by a factor $R=|r|^2\\le1$, which is the **reflectance**.\n\nIn the absence of absorption, reflectance $R$  and **transmittance** $T$ add to one due to energy conservation.\n\n$$\nR+T=1\n$$\n:::\n\nConsequently, the third wave would be now $U_3=hU_2=h^2U_1$.\nThe total amplitude is thus\n\n$$\nU=U_1+U_2+U_3+\\ldots+U_M = \\sqrt{I_0}(1+h+h^2+\\ldots)\n$$\n\n::: {#figure-fabry layout-ncol=2}\n\n::: {#6bc6959c .cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\"}\nM = 18  # number of phasors\nphi = np.pi/6  # example phase difference between successive phasors\nr = 0.95  # reduction factor for each subsequent phasor\n\ndef plot_angle(ax, pos, angle, length=0.95, acol=\"C0\", **kwargs):\n    vec2 = np.array([np.cos(np.deg2rad(angle)), np.sin(np.deg2rad(angle))])\n    xy = np.c_[[length, 0], [0, 0], vec2*length].T + np.array(pos)\n    ax.plot(*xy.T, color=acol)\n    return AngleAnnotation(pos, xy[0], xy[2], ax=ax, **kwargs)\n\ndef calculate_phasors(phi, M, r):\n    x_start = np.zeros(M)\n    y_start = np.zeros(M)\n    x_end = np.zeros(M)\n    y_end = np.zeros(M)\n\n    x_sum = 0\n    y_sum = 0\n\n    for i in range(M):\n        amplitude = r**i  # exponential decrease\n        x = amplitude * np.cos(i * phi)\n        y = amplitude * np.sin(i * phi)\n\n        x_start[i] = x_sum\n        y_start[i] = y_sum\n\n        x_sum += x\n        y_sum += y\n\n        x_end[i] = x_sum\n        y_end[i] = y_sum\n\n    return x_start, y_start, x_end, y_end\n\nx_start, y_start, x_end, y_end = calculate_phasors(phi, M, r)\n\nplt.figure(figsize=get_size(6, 6),dpi=150)\nax = plt.gca()\n\nfor i in range(M):\n    plt.arrow(x_start[i], y_start[i],\n             x_end[i]-x_start[i], y_end[i]-y_start[i],\n             head_width=0.15, head_length=0.2,\n             fc='k', ec='k',\n             length_includes_head=True,\n             label=f'E{i+1}' if i == 0 else \"\")\n\nplt.arrow(0, 0, x_end[-1], y_end[-1],\n         head_width=0.15, head_length=0.2, fc='r', ec='r',\n         length_includes_head=True, label='Resultant')\n\nax.set_aspect('equal')\nxx = np.linspace(-1, 3, 100)\nax.plot(xx,(xx-1)*np.tan(phi),'k--',lw=0.5)\nax.plot([1,3],[0,0],'k--',lw=0.5)\nkw = dict(size=195, unit=\"points\", text=r\"$\\phi$\")\nplot_angle(ax, (1.0, 0), phi*180/np.pi, textposition=\"inside\", **kw)\nplt.axis('off')\nmax_range = max(abs(x_end[-1]), abs(y_end[-1])) * 1.2\nplt.xlim(-max_range/1.8, max_range/0.8)\nplt.ylim(-0.1, max_range/0.9)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Phase construction of a multiwave intereference with M waves with decreasing amplitude due to a reflection coefficient $r=0.95$.](MultiWave Interference_files/figure-html/cell-6-output-1.png){width=304 height=203}\n:::\n:::\n\n\n::: {#91ca3725 .cell execution_count=6}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create phase array from -2π to 2π\nphi = np.linspace(-2*np.pi, 2*np.pi, 1000)\n\ndef calculate_intensity(phi, F):\n    return 1/(1 + 4*(F/np.pi)**2 * np.sin(phi/2)**2)\n\nplt.figure(figsize=get_size(10, 6))\n\nfinesse_values = [1, 4, 20]\nstyles = ['-', '--', ':']\n\nfor F, style in zip(finesse_values, styles):\n    I = calculate_intensity(phi, F)\n    plt.plot(phi/np.pi, I, style, label=f'$\\\\mathcal{{F}}={F}$')\n\nplt.xlabel('Phase $\\\\phi/\\\\pi$')\nplt.ylabel('$I/I_{\\\\mathrm{max}}$')\nplt.grid(True, alpha=0.3)\nplt.legend()\nplt.ylim(0, 1.1)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Multiple wave interference with decreasing amplitude. The graph shows the intensity distribution over the phase angle $\\phi$ for different values of the Finesse $\\mathcal{F}$.](MultiWave Interference_files/figure-html/cell-7-output-1.png){width=350 height=225}\n:::\n:::\n\n\n:::\n\nThis yields again\n\n$$\nU=\\sqrt{I_0}\\frac{(1-h^M)}{1-h}=\\frac{\\sqrt{I_0}}{1-r e^{i\\Delta\\phi}}\n$$\n\nCalculating the intensity of the waves is giving\n\n$$\nI=|U|^2=\\frac{I_{0}}{|1-re^{i\\Delta\\phi}|^2}=\\frac{I_0}{(1-r)^2+4r\\sin^2(\\Delta\\phi/2)}\n$$\n\nwhich is also known as the **Airy function**. This function can be further simplified by the following abbrevations\n\n$$\nI_{\\rm max}=\\frac{I_0}{(1-r)^2}\n$$\n\nand\n\n$$\n\\mathcal{F}=\\frac{\\pi \\sqrt{r}}{1-r}\n$$\n\nwhere the latter is called the *Finesse*. With those abbrevations, we obtain\n\n$$\nI=\\frac{I_{\\rm max}}{1+4\\left(\\frac{\\mathcal{F}}{\\pi}\\right)^2\\sin^{2}(\\Delta\\phi/2)}\n$$\n\nfor the interference of multiple waves with decreasing amplitude.\n\nThis intensity distribution has a different shape than the one we obtained for multiple waves with the same amplitude.\n\nWe clearly observe that with increasing Finesse the intensity maxima, which occur at multiples fo $\\pi$ get much narrower. In addition the regions between the maxima show better contrast and fopr higher Finesse we get complete destructive interference.\n:::\n\n\n## Light beating\n\n### Beating of two waves\nLet us consider now interference in the time domain. We introduce two monochromatic waves of frequencies $\\nu_1$ and $\\nu_2$. We will denote their amplitudes by $\\sqrt{I_1}$ and $\\sqrt{I_2}$.\n\nThe total amplitude is thus\n\n$$\nU=U_1+U_2 = \\sqrt{I_1} \\exp(i2\\pi\\nu_1 t) + \\sqrt{I_2} \\exp(i2\\pi\\nu_2 t)\n$$\n\nsuch that we obtain an Intensity\n\n$$\nI=|U|^2 = I_1 + I_2 + 2\\sqrt{I_1I_2}\\cos(2\\pi(\\nu_1-\\nu_2)t)\n$$\n\n\nThe intensity is thus time dependent and oscillates at a frequency $\\nu_1-\\nu_2$, which is the so-called beating frequency. Similar schemes are used in **optical heterodyne detection** but also in acoustics when tuning your guitar.\n\n\n### Multiple wave beating and pulse generation\n\nConsider now a whole set of $M=2L+1$ each with an amplitude $\\sqrt{I_0}$. The frequencies of the waves are given by $\\nu_q=\\nu_0+q\\Delta\\nu$ with $q=-L,\\dots,L$ with $\\nu_0$ beeing the center frequency of the spectrum and $\\Delta \\nu$ the frequency spacing. We will assume that $\\Delta nu<<\\nu_0$ such that the total amplitude of the waves is given by\n\n$$\nU=\\sum_{q=-L}^L \\sqrt{I_0} \\exp(i2\\pi(\\nu_0+q\\Delta\\nu)t)\n$$\n\nThe total intensity can then be calculated in the same way as for the multiple source in space before. Using $\\phi=2\\pi \\Delta \\nu t$ we obtained\n$$\nI(t)=I_0 \\frac{\\sin^2(M\\pi t/T)}{\\sin^2(\\pi t/T)}\n$$\n\nwith $T=1/\\Delta\\nu$ and a maximum intensity of $I_{\\rm max}=M^2 I_0$.\n\n::: {#cell-fig-pulse .cell execution_count=7}\n``` {.python .cell-code code-fold=\"true\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Parameters\nDelta_nu = 1e9  # 1 GHz\nM = 1000\nI0 = 1  # Normalized initial intensity\nT = 1/Delta_nu  # 1 ns\npulse_width = T/M  # 1 ps\n\n# Create figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=get_size(15, 10),\n                             gridspec_kw={'width_ratios': [2, 1]})\n\n# Time array for main plot showing multiple pulses\nt_main = np.linspace(-2*T, 2*T, 20000)\n\n# Time array for inset showing single pulse detail\nt_detail = np.linspace(-5*pulse_width, 5*pulse_width, 10000)\n\n# Calculate intensity function (avoiding division by zero)\ndef intensity(t, M, T, I0):\n    # Small value to prevent division by zero\n    eps = 1e-10\n    # Calculate using the formula\n    num = np.sin(M * np.pi * t / T)**2\n    den = np.sin(np.pi * t / T)**2\n    # Handle points where denominator is near zero\n    near_zero = np.abs(np.sin(np.pi * t / T)) < eps\n\n    result = np.zeros_like(t, dtype=float)\n    # For normal points, use formula\n    mask = ~near_zero\n    result[mask] = I0 * num[mask] / den[mask]\n    # For points where denominator is near zero, use limit value\n    result[near_zero] = M**2 * I0\n\n    return result\n\n# Calculate intensities\nI_main = intensity(t_main, M, T, I0)\nI_detail = intensity(t_detail, M, T, I0)\n\n# Maximum intensity\nmax_intensity = M**2 * I0\n\n# Main plot showing multiple pulses\nax1.plot(t_main*1e9, I_main, 'b-')\nax1.set_xlabel('time [ns]')\nax1.set_ylabel(r' $I/I_{0}$')\nax1.grid(True, alpha=0.3)\n\n# Mark maximum intensity\nax1.axhline(y=max_intensity, color='r', linestyle='--')\n\n# Mark period T\nax1.annotate('', xy=(T*1e9, 0.5e6), xytext=(0, 0.5e6),\n           arrowprops=dict(arrowstyle='<->', color='g'))\nax1.text(0.5*T*1e9, max_intensity*1.1, f'T = 1/Δν = {T*1e9:.1f} ns',\n        color='g', ha='center')\n\n\nax1.set_ylim(0, max_intensity*1.2)\n\n# Detail plot showing single pulse\nax2.plot(t_detail*1e12, I_detail, 'b-')\nax2.set_xlabel('time [ps]')\nax2.set_ylabel(r'$I/I_{0}$')\n\n\n# Mark pulse width\nax2.annotate('', xy=(-pulse_width/1*1e12, max_intensity*1.05),\n           xytext=(pulse_width/1*1e12, max_intensity*1.05),\n           arrowprops=dict(arrowstyle='<->', color='m'))\nax2.text(0, max_intensity*1.1, f'T/M = {pulse_width*1e12:.1f} ps',\n        color='m', ha='center')\n\nax2.set_ylim(0, max_intensity*1.2)\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Multiple wave beating with M=1000 monochromatic waves separated by Δν=1 GHz. The intensity oscillates with period T=1/Δν=1 ns. Each pulse has a width of approximately T/M=1 ps with maximum intensity I_max=M²I₀.](MultiWave Interference_files/figure-html/fig-pulse-output-1.png){#fig-pulse width=557 height=367 fig-align='center'}\n:::\n:::\n\n\n",
    "supporting": [
      "MultiWave Interference_files"
    ],
    "filters": [],
    "includes": {}
  }
}