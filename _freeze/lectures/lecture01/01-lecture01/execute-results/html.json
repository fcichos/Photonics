{
  "hash": "7cfda056d0014a4e83ae8df7f48e0481",
  "result": {
    "engine": "jupyter",
    "markdown": "---\n#title: \"Theories of Light\"\njupyter: python3\nformat:\n  html:\n    toc: true\n    toc-location: right\n    fig-cap-location: bottom\ncrossref:\n  fig-title: Figure\n  tbl-title: Table\n  title-delim: \"—\"\n  fig-prefix: Figure\n  eq-prefix: Equation\n  chapters: true\n  fig-labels: arabic\n---\n\n\n\n<!-- ## Ray Optics (20 minutes) -->\n\n## Theories for light\n\nLight has been described through increasingly sophisticated theoretical frameworks throughout the history of physics. The simplest framework is *Ray Optics* or *Geometrical Optics*, which treats light as rays traveling along straight paths and applies geometrical principles to describe interactions with optical elements like lenses and mirrors. Moving beyond this approximation, *Wave Optics* introduces the wave nature of light, explaining phenomena such as interference and diffraction that ray optics cannot address. *Electromagnetic Optics* further refines our understanding by treating light as electromagnetic waves governed by Maxwell's equations, providing a complete classical description of light-matter interactions. For intense light sources, *Nonlinear Optics* becomes essential, describing how materials respond nonlinearly to strong electromagnetic fields, giving rise to frequency conversion and other novel effects. Finally, at the most fundamental level, *Quantum Optics* treats light as consisting of photons—quantum mechanical particles exhibiting both wave and particle properties—essential for understanding phenomena like spontaneous emission, entanglement, and the quantum nature of light-matter interactions. This course will progressively build your understanding through these increasingly sophisticated frameworks.\n\n### Ray Optics\n\nRay optics, or geometric optics, provides a powerful framework for understanding light propagation when the wavelength is much **smaller than the dimensions of optical elements** involved. In this approach, light travels along straight lines called rays in homogeneous media, with well-defined paths that can be mathematically traced. This description serves as the foundation for analyzing many optical systems, from simple mirrors to complex microscopes and telescopes.\n\n#### Fermat's Principle: Integral and Differential Forms\n\n**Fermat's Principle** forms one of the foundations of ray optics, stating that light travels along the route that takes the total optical path length between any two points to an extremum (commonly a minimum). This optical path length, expressed mathematically as $\\int_C n(s)ds$, represents the effective distance light traverses through media of varying refractive indices. When this quantity is divided by the vacuum speed of light $c_0$, it yields the total travel time required for light to journey between those points.\n\nIn its integral form:\n\n$$\\delta\\int_C n(s)ds = 0$$\n\nwhere $n(s)$ is the refractive index along path $C$ and $ds$ is the differential path length.\n\n\nThe same principle can be expressed as a differential equation that describes how light bends in media with varying refractive indices:\n\n$$\\frac{d}{ds}\\left(n\\frac{d\\mathbf{r}}{ds}\\right) = \\nabla n$$\n\nThis equation shows that rays bend toward regions of higher refractive index. In homogeneous media ($\\nabla n = 0$), it simplifies to $\\frac{d^2\\mathbf{r}}{ds^2} = 0$, confirming that light follows straight lines.\n\n#### Optical Laws Derived from Fermat's Principle\n\n**Reflection**: At a planar interface, Fermat's Principle directly yields the law of reflection:\n\n$$\\theta_i = \\theta_r$$\n\nwhere $\\theta_i$ is the angle of incidence and $\\theta_r$ is the angle of reflection, both measured from the normal to the surface.\n\n::: {#cell-fig-fermat-reflection .cell execution_count=2}\n``` {.python .cell-code}\ndef calculate_path_length(x, start, end):\n    \"\"\"Calculate the total path length from start to point x to end\"\"\"\n    d1 = np.sqrt((x - start[0])**2 + (start[1])**2)\n    d2 = np.sqrt((end[0] - x)**2 + (end[1])**2)\n    return d1 + d2\n\n# Set up the figure\nfig, ax = plt.subplots(figsize=get_size(15, 10))\n\n# Define start and end points\nstart_point = (-4, 3)\nend_point = (4, 3)\n\n# X positions for different possible paths\nx_positions = np.linspace(-3.5, 3.5, 15)\n\n# Calculate path lengths\npath_lengths = [calculate_path_length(x, start_point, end_point) for x in x_positions]\n\n# Find the minimum path (Fermat's principle)\nmin_index = np.argmin(path_lengths)\nmin_x = x_positions[min_index]\n\n# Plot the horizontal line (interface)\nax.axhline(y=0, color='black', linestyle='-', linewidth=1)\n\n# Plot all possible paths\nfor i, x in enumerate(x_positions):\n    if i == min_index:\n        continue  # Skip the minimum path for now\n\n    # Create path\n    verts = [\n        start_point,\n        (x, 0),\n        end_point\n    ]\n    codes = [\n        Path.MOVETO,\n        Path.LINETO,\n        Path.LINETO\n    ]\n    path = Path(verts, codes)\n    patch = patches.PathPatch(path, facecolor='none', edgecolor='gray',\n                             linestyle='--', lw=0.5,alpha=0.65)\n    ax.add_patch(patch)\n\n# Plot the minimum path (Fermat's Principle)\nverts = [\n    start_point,\n    (min_x, 0),\n    end_point\n]\ncodes = [\n    Path.MOVETO,\n    Path.LINETO,\n    Path.LINETO\n]\npath = Path(verts, codes)\npatch = patches.PathPatch(path, facecolor='none', edgecolor='red',\n                         linestyle='-')\nax.add_patch(patch)\n\n# Add dots for the points\nax.plot(start_point[0], start_point[1], 'bo', label='start point')\nax.plot(end_point[0], end_point[1], 'go',  label='end point')\nax.plot(min_x, 0, 'ro',  label='reflection Point')\n\n# Set labels and title\nax.set_xlabel('x-position')\nax.set_ylabel('y-position')\nax.text(-0.7, -1, \"mirror\")\n\n# Set plot limits and legend\nax.set_xlim(-5, 5)\nax.set_ylim(-4, 4)\nax.set_aspect('equal')\nax.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Fermat's principle for reflection of light at an interface](01-lecture01_files/figure-html/fig-fermat-reflection-output-1.png){#fig-fermat-reflection width=440 height=364}\n:::\n:::\n\n\n:::{.callout-note collapse=true}\n#### Reflection Law Derivation\nFor reflection at a planar interface, we consider a ray traveling from point A to point B via reflection at point P on a mirror, as illustrated in Fig. \\ref{fig-fermat-reflection}. The total path length is $L = |AP| + |PB|$.\n\nLet's establish a coordinate system where the mirror lies along the x-axis at y = 0. If point A is at coordinates $(-a, h_1)$ and point B is at $(b, h_2)$, with the reflection point P at $(x, 0)$, the total path length is:\n\n$$L(x) = \\sqrt{(x+a)^2 + h_1^2} + \\sqrt{(b-x)^2 + h_2^2}$$\n\nAccording to Fermat's Principle, the actual path minimizes $L$, so we differentiate with respect to $x$ and set it equal to zero:\n\n$$\\frac{dL}{dx} = \\frac{x+a}{\\sqrt{(x+a)^2 + h_1^2}} - \\frac{b-x}{\\sqrt{(b-x)^2 + h_2^2}} = 0$$\n\nRearranging this equation:\n\n$$\\frac{x+a}{\\sqrt{(x+a)^2 + h_1^2}} = \\frac{b-x}{\\sqrt{(b-x)^2 + h_2^2}}$$\n\nNow, let's interpret this geometrically. The angle of incidence $\\theta_i$ is the angle between the incident ray AP and the normal to the mirror (y-axis). Similarly, the angle of reflection $\\theta_r$ is the angle between the reflected ray PB and the normal.\n\nFrom trigonometry:\n\n- $\\sin(\\theta_i) = \\frac{x+a}{\\sqrt{(x+a)^2 + h_1^2}}$\n- $\\sin(\\theta_r) = \\frac{b-x}{\\sqrt{(b-x)^2 + h_2^2}}$\n\nTherefore, our minimization condition directly yields:\n$$\\sin(\\theta_i) = \\sin(\\theta_r)$$\n\nSince both angles are measured in the same quadrant (from the normal to the mirror), this equality implies:\n$$\\theta_i = \\theta_r$$\n\nThis is the law of reflection: the angle of incidence equals the angle of reflection.\n\n**Law of Reflection**: The angle of incidence equals the angle of reflection.\n$$\\theta_i = \\theta_r$$\n:::\n\n\n**Refraction**: Between media with different refractive indices, Fermat's Principle yields Snell's law:\n\n$$n_1\\sin\\theta_1 = n_2\\sin\\theta_2$$\n\nwhere $\\theta_1$ and $\\theta_2$ are the angles of incidence and refraction, respectively.\n\n::: {#cell-fig-fermat-refraction .cell execution_count=3}\n``` {.python .cell-code}\ndef calculate_optical_path(x, start, end, n1, n2):\n    \"\"\"Calculate the total optical path length from start to point x to end\"\"\"\n    d1 = n1 * np.sqrt((x - start[0])**2 + (start[1])**2)  # Optical path in medium 1\n    d2 = n2 * np.sqrt((end[0] - x)**2 + (end[1])**2)      # Optical path in medium 2\n    return d1 + d2\n\n# Set up the figure\nfig, ax = plt.subplots(figsize=get_size(15, 10))\n\n# Define start and end points\nstart_point = (-4, 3)\nend_point = (4, -3)\n\n# Define refractive indices\nn1 = 1.0  # Medium 1 (above interface)\nn2 = 1.5  # Medium 2 (below interface)\n\n# X positions for different possible paths\nx_positions = np.linspace(-3.5, 3.5, 15)\n\n# Calculate optical path lengths\noptical_paths = [calculate_optical_path(x, start_point, end_point, n1, n2) for x in x_positions]\n\n# Find the minimum path (Fermat's principle)\nmin_index = np.argmin(optical_paths)\nmin_x = x_positions[min_index]\n\n# Plot the horizontal line (interface)\nax.axhline(y=0, color='black', linestyle='-', linewidth=1)\n\n# Plot all possible paths\nfor i, x in enumerate(x_positions):\n    if i == min_index:\n        continue  # Skip the minimum path for now\n\n    # Create path\n    verts = [\n        start_point,\n        (x, 0),\n        end_point\n    ]\n    codes = [\n        Path.MOVETO,\n        Path.LINETO,\n        Path.LINETO\n    ]\n    path = Path(verts, codes)\n    patch = patches.PathPatch(path, facecolor='none', edgecolor='gray',\n                             linestyle='--', lw=0.5, alpha=0.65)\n    ax.add_patch(patch)\n\n# Plot the minimum path (Fermat's Principle)\nverts = [\n    start_point,\n    (min_x, 0),\n    end_point\n]\ncodes = [\n    Path.MOVETO,\n    Path.LINETO,\n    Path.LINETO\n]\npath = Path(verts, codes)\npatch = patches.PathPatch(path, facecolor='none', edgecolor='red',\n                         linestyle='-', lw=1)\nax.add_patch(patch)\n\n# Add dots for the points\nax.plot(start_point[0], start_point[1], 'bo', label='start')\nax.plot(end_point[0], end_point[1], 'go', label='end')\nax.plot(min_x, 0, 'ro', label='refraction')\n\n# Calculate and draw angles\n# Incident ray\ndx1 = min_x - start_point[0]\ndy1 = 0 - start_point[1]\nincident_angle = np.arctan2(-dy1, dx1)\ntheta1 = np.pi/2 - incident_angle\n\n# Refracted ray\ndx2 = end_point[0] - min_x\ndy2 = end_point[1] - 0\nrefracted_angle = np.arctan2(dy2, dx2)\ntheta2 = np.pi/2 + refracted_angle\n\n# Draw angle arcs\n\n# Add angle labels\nax.text(min_x + 0.3, 0.3, r'$\\theta_1$', color='blue')\nax.text(min_x - 0.5, -0.3, r'$\\theta_2$', color='green')\n\n# Set labels and title\nax.set_xlabel('x-position')\nax.set_ylabel('y-position')\nax.text(-3, 0.5, f\"n₁ = {n1}\", color='blue')\nax.text(-3, -0.5, f\"n₂ = {n2}\", color='green')\n\n# Set plot limits and legend\nax.set_xlim(-5, 5)\nax.set_ylim(-4, 4)\nax.set_aspect('equal')\nax.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Snell's Law from Fermat's Principle](01-lecture01_files/figure-html/fig-fermat-refraction-output-1.png){#fig-fermat-refraction width=440 height=364}\n:::\n:::\n\n\n:::{.callout-note collapse=true}\n#### Refraction Law Derivation\nFor refraction between two media with different refractive indices, we apply Fermat's principle to find the path that minimizes the total optical path length. Consider a ray traveling from point A in medium 1 to point B in medium 2, with refraction occurring at point P on the interface, as illustrated in Fig. \\ref{fig-fermat-refraction}.\n\nThe total optical path length is:\n\n$$L = n_1|AP| + n_2|PB|$$\n\nTo determine the exact refraction point P that minimizes this path, we establish a coordinate system with the interface along the x-axis at y = 0. If point A is at coordinates $(x_A, y_A)$ where $y_A > 0$, and point B is at $(x_B, y_B)$ where $y_B < 0$, with the refraction point P at $(x, 0)$, the total optical path length is:\n\n$$L(x) = n_1\\sqrt{(x-x_A)^2 + y_A^2} + n_2\\sqrt{(x_B-x)^2 + y_B^2}$$\n\nAccording to Fermat's Principle, we minimize $L$ by differentiating with respect to $x$ and setting it equal to zero:\n\n$$\\frac{dL}{dx} = n_1\\frac{x-x_A}{\\sqrt{(x-x_A)^2 + y_A^2}} - n_2\\frac{x_B-x}{\\sqrt{(x_B-x)^2 + y_B^2}} = 0$$\n\nRearranging this equation:\n\n$$\\frac{n_1(x-x_A)}{\\sqrt{(x-x_A)^2 + y_A^2}} = \\frac{n_2(x_B-x)}{\\sqrt{(x_B-x)^2 + y_B^2}}$$\n\nFrom geometry, we can identify the sine of the angles of incidence and refraction:\n\n- $\\sin(\\theta_1) = \\frac{|x-x_A|}{|AP|} = \\frac{|x-x_A|}{\\sqrt{(x-x_A)^2 + y_A^2}}$\n- $\\sin(\\theta_2) = \\frac{|x_B-x|}{|PB|} = \\frac{|x_B-x|}{\\sqrt{(x_B-x)^2 + y_B^2}}$\n\nTaking the sign into account based on our coordinate system, our minimization condition becomes:\n\n$$n_1\\sin(\\theta_1) = n_2\\sin(\\theta_2)$$\n\nThis is Snell's law, stating that the ratio of the sines of the angles of incidence and refraction equals the ratio of the refractive indices of the two media.\n\n**Snell's Law**: The ratio of the sines of the angles of incidence and refraction equals the reciprocal of the ratio of the refractive indices.\n$$n_1\\sin\\theta_1 = n_2\\sin\\theta_2$$\n:::\n\n::: {#cell-fig-snells-combinations .cell execution_count=4}\n``` {.python .cell-code code-fold=\"true\"}\ndef snell(n1, n2, theta1):\n    sin_theta2 = n1 * np.sin(theta1) / n2\n    theta2 = np.arcsin(np.clip(sin_theta2, -1, 1))\n    theta2[sin_theta2 > 1] = np.nan\n    return theta2\n\nfig, ax = plt.subplots(figsize=(4, 4))\n\ntheta1 = np.linspace(0, np.pi/2, 1000)\n\ntheta2_1_to_1_5 = snell(1.0, 1.5, theta1)\ntheta2_1_5_to_1 = snell(1.5, 1.0, theta1)\ntheta2_1_to_1 = snell(1.0, 1.0, theta1)\n\nax.plot(np.degrees(theta1), np.degrees(theta2_1_to_1_5), color='blue')\nax.plot(np.degrees(theta1), np.degrees(theta2_1_5_to_1), color='red')\nax.plot(np.degrees(theta1), np.degrees(theta2_1_to_1), color='green', linestyle='--')\n\nax.set_xlabel(r'$\\theta_1$ [°]')\nax.set_ylabel(r'$\\theta_2$ [°]')\nax.set_xlim(0, 90)\nax.set_ylim(0, 90)\n\nax.plot([0, 90], [0, 90], color='gray', linestyle=':', label='y=x')\n\nax.annotate(r'$\\frac{n_2}{n_1}=1.5$', xy=(60, 35), xytext=(50, 20),\n            arrowprops=dict(arrowstyle='->'), color='blue')\nax.annotate(r'$\\frac{n_1}{n_2}=1.5$', xy=(30, 50), xytext=(10, 70),\n            arrowprops=dict(arrowstyle='->'), color='red')\nax.annotate(r'$\\frac{n_2}{n_1}=1$', xy=(45, 45), xytext=(65, 50),\n            arrowprops=dict(arrowstyle='->'), color='green')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Snell's law for different combinations of refractive indices. The plots show the relationship between incident angle ($\\theta_1$) and refracted angle ($\\theta_2$) for three scenarios: (a) light passing from air to glass, (b) light passing from glass to air, and (c) a comparison of both cases. Note how the curves differ when light moves into a medium with higher refractive index versus a lower refractive index.](01-lecture01_files/figure-html/fig-snells-combinations-output-1.png){#fig-snells-combinations width=366 height=366}\n:::\n:::\n\n\n##### Total Internal Reflection\n\nWhen light travels from a medium with a higher refractive index ($n_1$) to one with a lower refractive index ($n_2$), a fascinating phenomenon can occur. As the angle of incidence increases, the refracted ray bends away from the normal until, at a critical angle, it travels along the boundary between the two media. Beyond this critical angle, light can no longer pass into the second medium and is instead completely reflected back into the first medium. This phenomenon is known as **total internal reflection** (TIR).\n\nFrom Snell's law, the critical angle $\\theta_c$ occurs when the refracted angle $\\theta_2 = 90°$:\n\n$$n_1\\sin\\theta_c = n_2\\sin(90°) = n_2$$\n\nTherefore:\n\n$$\\theta_c = \\arcsin\\left(\\frac{n_2}{n_1}\\right)$$\n\nFor total internal reflection to occur, two conditions must be satisfied:\n\n1. Light must travel from a higher to a lower refractive index medium ($n_1 > n_2$)\n2. The angle of incidence must exceed the critical angle ($\\theta_1 > \\theta_c$)\n\nFrom Fermat's principle perspective, total internal reflection represents a scenario where no physical path through the second medium can satisfy the minimum optical path length requirement. Instead, the path of least time becomes the reflected path within the original medium.\nThis phenomenon has numerous practical applications, including:\n\n- **Fiber optic communication**: Light signals travel long distances through optical fibers via successive total internal reflections with minimal loss\n- **Prisms and reflectors**: Total internal reflection in prisms provides perfect reflection without needing reflective coatings\n- **Gemstones**: The brilliance of diamonds results from light being trapped through multiple internal reflections\n- **Optical instruments**: Binoculars, periscopes, and endoscopes use prisms with TIR to redirect light\n\nTotal internal reflection demonstrates how Fermat's principle enforces an absolute constraint on light's behavior—when no path through the second medium can minimize the optical path length, light must remain in the first medium, following the path of least time.\n\n**Optical Fibers and Total Internal Reflection**\n\nTotal internal reflection plays a crucial role in modern telecommunications, particularly in optical fibers, which are also part of many experimental setups. These fibers are essentially ultra-thin glass wires, ranging in diameter from a few micrometers to several hundred micrometers, designed to transport light over long distances with minimal loss.\n\nThe structure of an optical fiber is key to its function:\n\n1. Core: A central glass core with a refractive index $n_1$\n2. Cladding: A surrounding layer with a slightly lower refractive index $n_2$\n\nThis difference in refractive indices is what allows total internal reflection to occur within the fiber.\n\n![Total internal reflection in an optical fiber.](img/fiber.png){#fig-optical-fiber width=59%}\n\nFor light to propagate effectively through the fiber, it must enter at an angle that ensures total internal reflection at the core-cladding interface. This leads to the concept of the acceptance angle, $\\theta_a$, which is the maximum angle at which light can enter the fiber and still undergo total internal reflection.\n\nTo characterize this acceptance angle, optical engineers use a parameter called the **Numerical Aperture (NA)**.\n\n::: {.callout-tip}\n## Numerical Aperture\nThe Numerical Aperture of a fiber is defined as the sine of the maximum acceptance angle:\n\n\\begin{equation}\nNA = \\sin(\\theta_a) = \\sqrt{n_1^2 - n_2^2}\n\\end{equation}\n:::\n\nThis equation relates the NA directly to the refractive indices of the core and cladding. The derivation of this formula involves applying Snell's law at the air-fiber interface and at the core-cladding interface, then using the condition for total internal reflection.\n\nIn practice, typical values for the refractive indices might be $n_1 = 1.475$ for the core and $n_2 = 1.46$ for the cladding. Plugging these into our equation:\n\n\\begin{equation}\nNA = \\sqrt{1.475^2 - 1.46^2} \\approx 0.2\n\\end{equation}\n\nThis means that light entering the fiber within a cone of about 11.5° (arcsin(0.2)) from the fiber's axis will be transmitted through the fiber via total internal reflection.\n\nThe NA is an important parameter in fiber optic design:\n\n1. It determines the light-gathering ability of the fiber.\n2. It affects the fiber's bandwidth and its susceptibility to certain types of signal distortion.\n3. It influences how easily the fiber can be coupled to light sources and other fibers.\n\nOptical fibers come in various types, each optimized for different applications. Some fibers are designed to transmit light over long distances with minimal loss, while others are engineered for specific wavelengths or to guide light in unusual ways. The figure below shows a few examples of optical fiber types.\n\n![Rendering of different optical fibers types (from left to right): Hollow core optical fiber, hollow core bragg fiber, photonic crystal fiber, conventional fiber](img/fibers.png){#fig-optical-fiber width=100%}\n\n\n### Differential Form of Fermat's Law\nTo derive the differential ray equation from Fermat's integral principle, we apply the calculus of variations. Starting with the optical path length functional:\n\n$$L = \\int_C n(s)ds = \\int_{t_1}^{t_2} n(\\mathbf{r}(t)) \\left|\\frac{d\\mathbf{r}}{dt}\\right| dt$$\n\nWhere $\\mathbf{r}(t)$ parametrizes the path. The term $\\left|\\frac{d\\mathbf{r}}{dt}\\right|$ represents the differential element of arc length $ds$ along the path, so $ds = \\left|\\frac{d\\mathbf{r}}{dt}\\right| dt$. This parametrization allows us to convert the path integral over the curve $C$ into a definite integral over the parameter $t$. According to Fermat's principle, the true path makes this integral stationary (δL = 0).\n\nConsider a small variation in the path: $\\mathbf{r}(t) \\rightarrow \\mathbf{r}(t) + \\epsilon\\mathbf{\\eta}(t)$ where $\\mathbf{\\eta}(t_1) = \\mathbf{\\eta}(t_2) = 0$ (fixed endpoints). Expanding the variation of the integral to first order in ε:\n\n$$\\delta L = \\frac{d}{d\\epsilon}\\bigg|_{\\epsilon=0} \\int_{t_1}^{t_2} n(\\mathbf{r}(t) + \\epsilon\\mathbf{\\eta}(t)) \\left|\\frac{d}{dt}(\\mathbf{r}(t) + \\epsilon\\mathbf{\\eta}(t))\\right| dt$$\n\nUsing the chain rule and reparametrizing with arc length $s$ (where $\\frac{d\\mathbf{r}}{ds}$ is a unit vector), the stationarity condition leads to:\n\n$$\\int_C \\left[ \\nabla n \\cdot \\mathbf{\\eta} - \\frac{d}{ds}\\left(n\\frac{d\\mathbf{r}}{ds}\\right) \\cdot \\mathbf{\\eta} \\right] ds = 0$$\n\nSince this must hold for any variation $\\mathbf{\\eta}$, we obtain the Euler-Lagrange equation:\n\n$$\\frac{d}{ds}\\left(n\\frac{d\\mathbf{r}}{ds}\\right) = \\nabla n$$\n\nThis shows that rays bend toward regions of higher refractive index, directly analogous to how a mechanical particle's trajectory is affected by a potential field in classical mechanics.\n\n\n:::{.callout-note collapse=\"true\"}\n\n## SELFOC Gradient Index Lens\n\nSELFOC (SELf-FOCusing) gradient-index fibers are interesting optical elements that guide light through a continuous refraction process rather than discrete refractions at interfaces. Let me demonstrate how Fermat's principle can be used to determine the ray paths in these fibers. A SELFOC fiber has a radially varying refractive index, typically following a parabolic profile:\n\n$$n(r) = n_0\\left(1 - \\frac{1}{2}\\alpha^2 r^2\\right)$$\n\nwhere:\n- $n_0$ is the refractive index at the central axis\n- $r$ is the radial distance from the axis\n- $\\alpha$ is the gradient constant that determines how quickly the index decreases with radius\n\n### Fermat's Principle in Gradient-Index Media\n\nFor a medium with a spatially varying refractive index, Fermat's principle states that light follows the path that minimizes the optical path length:\n\n$$\\delta \\int_C n(r) ds = 0$$\n\nThis yields the differential equation:\n\n$$\\frac{d}{ds}\\left(n\\frac{d\\mathbf{r}}{ds}\\right) = \\nabla n$$\n\n### Deriving the Ray Path Equation\n\nFor our parabolic index profile, the gradient of the refractive index is:\n\n$$\\nabla n = \\frac{\\partial n}{\\partial r}\\hat{\\mathbf{r}} = -n_0\\alpha^2 r \\hat{\\mathbf{r}}$$\n\nUsing cylindrical coordinates with z along the fiber axis, and assuming the paraxial approximation (rays make small angles with the z-axis), we can simplify the ray equation to:\n\n$$\\frac{d^2r}{dz^2} + \\alpha^2 r = 0$$\n\nThis is the equation for a harmonic oscillator, which has the solution:\n\n$$r(z) = r_0 \\cos(\\alpha z) + \\frac{\\theta_0}{\\alpha} \\sin(\\alpha z)$$\n\nwhere $r_0$ is the initial radial position and $\\theta_0$ is the initial angle of the ray with respect to the fiber axis.\n\n::: {#cell-fig-selfoc .cell execution_count=5}\n``` {.python .cell-code}\n# Parameters\nn0 = 1.5  # Central refractive index\nalpha = 0.3  # Gradient constant (mm^-1)\nlength = 30  # Length of fiber (mm)\nradius = 1.5  # Radius of fiber (mm)\n\n# Create a grid for visualization\nz = np.linspace(0, length, 300)\nr_grid = np.linspace(0, radius, 100)\nZ, R = np.meshgrid(z, r_grid)\n\n# Calculate refractive index at each point\nN = n0 * (1 - 0.5 * (alpha * R)**2)\n\n# Initialize ray paths\nr0_values = [0.6, 1.0, 1.4]  # Initial radial positions\ntheta0_values = [0, 0.2, -0.2]    # Initial angles (all parallel to axis)\n\n# Plot setup\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=get_size(15, 5), gridspec_kw={'width_ratios': [3, 1]})\n\n# Plot the refractive index profile in the first subplot\ncmap = plt.cm.viridis\nextent = [0, length, -radius, radius]\nim = ax1.imshow(np.vstack((N[::-1], N)), extent=extent,\n               aspect='auto', cmap=cmap, origin='lower',alpha=0.2)\nfig.colorbar(im, ax=ax1, label='n(y)')\n\n# Plot ray paths\nfor r0, theta0 in zip(r0_values, theta0_values):\n    # Calculate ray path\n    r = r0 * np.cos(alpha * z) + (theta0/alpha) * np.sin(alpha * z)\n\n    # Plot ray path\n    ax1.plot(z, r, 'r-')\n    ax1.plot(z, -r, 'r-')  # Symmetric ray below axis\n\n# Add labels and title for first subplot\nax1.set_xlabel('z [mm]')\nax1.set_ylabel('y [mm]')\n\n# For the right subplot, plot r-position vs refractive index\n# Create a finer array of radial positions for a smooth curve\nr_positions = np.linspace(0, radius, 100)\n# Calculate refractive index at each radial position\nn_profile = n0 * (1 - 0.5 * (alpha * r_positions)**2)\n\n# Plot the refractive index profile\nax2.plot( n_profile,r_positions, 'k-')\nax2.plot( n_profile,-r_positions, 'k-')\n\n# Set labels for the index profile subplot\nax2.set_xlabel('y [mm]')\nax2.set_ylabel('n(y)')\n\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Ray-path inside a SELFOC gradient index optical fiber.](01-lecture01_files/figure-html/fig-selfoc-output-1.png){#fig-selfoc width=552 height=175}\n:::\n:::\n\n\n:::\n\n\n\n### Fermat's Principle and the \"F=ma\" Analogy in Optics\n\nThe differential form of Fermat's principle:\n\n$$\\frac{d}{ds}\\left(n\\frac{d\\mathbf{r}}{ds}\\right) = \\nabla n$$\n\nreveals a profound analogy with Newton's Second Law of motion:\n\n$$\\mathbf{F} = m\\mathbf{a} = m\\frac{d^2\\mathbf{r}}{dt^2}$$\n\nThis comparison, sometimes called \"F=ma optics,\" illustrates how light rays follow trajectories mathematically similar to those of mechanical particles. To see this connection more clearly, we can expand the ray equation as:\n\n$$n\\frac{d^2\\mathbf{r}}{ds^2} + \\frac{d\\mathbf{r}}{ds}\\frac{dn}{ds} = \\nabla n$$\n\nUsing the chain rule, $\\frac{dn}{ds} = \\nabla n \\cdot \\frac{d\\mathbf{r}}{ds}$, and denoting $\\mathbf{t} = \\frac{d\\mathbf{r}}{ds}$ as the unit tangent vector along the ray:\n\n$$n\\frac{d^2\\mathbf{r}}{ds^2} + (\\nabla n \\cdot \\mathbf{t})\\mathbf{t} = \\nabla n$$\n\nRearranging to isolate the ray curvature term:\n\n$$n\\frac{d^2\\mathbf{r}}{ds^2} = \\nabla n - (\\nabla n \\cdot \\mathbf{t})\\mathbf{t}$$\n\nThe right side represents the component of $\\nabla n$ perpendicular to the ray direction, which we can denote as $(\\nabla n)_\\perp$. Therefore:\n\n$$\\frac{d^2\\mathbf{r}}{ds^2} = \\frac{1}{n}(\\nabla n)_\\perp$$\n\nThis equation reveals that the ray curvature is proportional to the perpendicular component of the refractive index gradient and inversely proportional to the refractive index itself. Crucially, this shows that light rays bend **toward** regions of higher refractive index, not away from them.\n\nThis behavior explains many optical phenomena:\n\n- Light bending toward the normal when entering a medium with higher refractive index\n- Light guiding in optical fibers where light remains confined in the higher-index core\n- Formation of mirages where light curves toward the denser air near the ground\n- Focusing in gradient-index (GRIN) lenses where the refractive index decreases radially from the center\n\nWhile the mathematical form resembles Newton's equation for particle motion, the analogy must be carefully interpreted: unlike particles that accelerate toward lower potential energy, light rays curve toward regions of higher refractive index.\n\n::: {#cell-fig-f-equals-ma .cell execution_count=6}\n``` {.python .cell-code}\n# Parameters\nn0 = 1.5  # Base refractive index (center value)\nn_min = 1.0  # Minimum refractive index (at edges)\nx_range = np.linspace(-5, 5, 100)\ny_range = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x_range, y_range)\n\n# Calculate radial distance from center\nR = np.sqrt(X**2 + Y**2)\n# Max radius in our plot\nR_max = 5*np.sqrt(2)\n\n# Create a refractive index profile that decreases with radius\n# but never goes below n_min\ngradient_strength = (n0 - n_min)/R_max  # Calculate appropriate gradient strength\nn = n0 - gradient_strength * R  # Linear decrease with radius\n\n# Set up the figure\nfig, ax = plt.subplots(figsize=get_size(12, 10))\n\n# Plot the refractive index as a contour plot\ncontour = ax.contourf(X, Y, n, 20, cmap='viridis', alpha=0.3)\ncbar = fig.colorbar(contour, ax=ax, label='Refractive Index')\n\n# Calculate and plot some ray trajectories\n# We'll simulate the paths by numerical integration\n\ndef ray_path(r0, v0, steps=1000, dt=0.05):\n    \"\"\"Simulate a ray path through the medium\"\"\"\n    r = np.zeros((steps, 2))\n    v = np.zeros((steps, 2))\n    r[0] = r0\n    v[0] = v0 / np.linalg.norm(v0)  # Normalize velocity\n\n    for i in range(1, steps):\n        # Get position\n        x, y = r[i-1]\n        if abs(x) >= 5 or abs(y) >= 5:\n            return r[:i]\n\n        # Approximate gradient of n at this point\n        eps = 0.01\n        nx_plus = n0 - gradient_strength * np.sqrt((x+eps)**2 + y**2)\n        nx_minus = n0 - gradient_strength * np.sqrt((x-eps)**2 + y**2)\n        ny_plus = n0 - gradient_strength * np.sqrt(x**2 + (y+eps)**2)\n        ny_minus = n0 - gradient_strength * np.sqrt(x**2 + (y-eps)**2)\n\n        grad_n_x = (nx_plus - nx_minus) / (2*eps)\n        grad_n_y = (ny_plus - ny_minus) / (2*eps)\n        grad_n = np.array([grad_n_x, grad_n_y])\n\n        # Current n value\n        current_n = n0 - gradient_strength * np.sqrt(x**2 + y**2)\n\n        # Calculate the perpendicular component of gradient\n        t = v[i-1] / np.linalg.norm(v[i-1])  # Tangent vector (normalized velocity)\n        grad_n_parallel = np.dot(grad_n, t) * t  # Component along ray direction\n        grad_n_perp = grad_n - grad_n_parallel  # Perpendicular component\n\n        # Update velocity - rays bend toward higher refractive index\n        a = grad_n_perp / current_n\n        v[i] = v[i-1] + a * dt\n        v[i] = v[i] / np.linalg.norm(v[i])  # Ensure unit speed\n\n        # Update position\n        r[i] = r[i-1] + v[i] * dt\n\n    return r\n\n# Calculate several ray paths\nstart_positions = [\n    [-4, 2.5], [-4, 1.5], [-4, 0.5],\n    [-4, -0.5], [-4, -1.5], [-4, -2.5]\n]\npaths = []\n\nfor start_pos in start_positions:\n    path = ray_path(start_pos, [1, 0], steps=500)\n    paths.append(path)\n    ax.plot(path[:, 0], path[:, 1], 'r-', linewidth=1.5)\n\n# Add start points\nfor pos in start_positions:\n    ax.plot(pos[0], pos[1], 'ro')\n\n# Add axis labels\nax.set_xlabel('x position')\nax.set_ylabel('y position')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.set_aspect('equal')\nax.grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![F=ma optics - Light rays (red) following paths toward regions of higher refractive index](01-lecture01_files/figure-html/fig-f-equals-ma-output-1.png){#fig-f-equals-ma width=442 height=349}\n:::\n:::\n\n\n### Lenses\n\nLenses are among the most fundamental optical elements in photonics, using curved surfaces (typically spherical) to manipulate light paths. Understanding how lenses work requires analyzing refraction at spherical surfaces and applying this to the thin lens model.\n\n#### Refraction at Spherical Surfaces\n\nWhen light encounters a spherical boundary between two media, we can analyze its path using Snell's law and geometric considerations as shown below:\n\n::: {#fig-curved-surface fig-align=\"center\"}\n![](img/curved_surface.png){width=80%}\n\nRefraction at a curved surface.\n:::\n\nTo determine how an image forms, we need to find where rays originating from a point at distance $a$ from the surface will converge after refraction. Using Snell's law for a ray hitting the surface at angle $\\alpha+\\theta_1$:\n\n$$n_{1}\\sin(\\alpha+\\theta_1)=n_{2}\\sin(\\alpha-\\theta_2)$$\n\nWhere:\n$$\\sin(\\alpha)=\\frac{y}{R}, \\quad \\tan(\\theta_1)=\\frac{y}{a}, \\quad \\tan(\\theta_2)=\\frac{y}{b}$$\n\nFor practical optical systems, we employ the **paraxial approximation**, where all angles are assumed small enough that:\n\n$$\\sin(\\theta) \\approx \\theta+ O(\\theta^{3}), \\quad \\tan(\\theta) \\approx \\theta + O(\\theta^{3}),\\quad \\cos(\\theta)\\approx 1 + O(\\theta^{2})$$\n\nThis simplifies Snell's law to:\n\n$$n_1(\\alpha+\\theta_1)=n_2(\\alpha-\\theta_2)$$\n\nAfter appropriate transformations (detailed in the online lecture), we obtain:\n\n$$\\theta_2=\\frac{n_2-n_1}{n_2 R}y -\\frac{n_1}{n_2}\\theta_1$$\n\nThis linear relationship between input ($y$, $\\theta_1$) and output ($\\theta_2$) parameters is a hallmark of paraxial optics.\n\n::: {.callout-note collapse=\"true\" #paraxial-approximation}\n### Paraxial Approximation\n\nThe paraxial approximation is a fundamental simplification in optics that assumes all angles are small. This allows us to use linear approximations for trigonometric functions, significantly simplifying calculations while maintaining accuracy for most practical scenarios involving lenses.\n\nTo visualize the validity of this approximation, let's examine two plots:\n\n1. The first plot compares sin(θ) (blue line) with its linear approximation θ (red dashed line) for angles ranging from 0 to π/2 radians.\n2. The second plot shows the absolute error between sin(θ) and θ.\n\nThese plots demonstrate that:\n\n1. For small angles (roughly up to 0.5 radians or about 30 degrees), the approximation is very close to the actual sine function.\n2. The error increases rapidly for larger angles, indicating the limitations of the paraxial approximation.\n\nIn most optical systems, especially those involving lenses, the angles of incident and refracted rays are typically small enough for this approximation to be valid. However, it's important to be aware of its limitations when dealing with wide-angle optical systems or scenarios where precision is critical.\n\n::: {#ec2cbc5f .cell execution_count=7}\n``` {.python .cell-code code-fold=\"true\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Define the range of angles (in radians)\ntheta = np.linspace(0, np.pi/2, 1000)\n\n# Calculate sin(theta) and theta (linear approximation)\nsin_theta = np.sin(theta)\nlinear_approx = theta\n\n# Calculate the absolute error\nerror = np.abs(sin_theta - linear_approx)\n\n# Create the plot with two subplots side by side\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(7.5, 4))\n\n# Plot sin(theta) and theta on the first subplot\nax1.plot(theta, sin_theta, label='sin(θ)', color='blue')\nax1.plot(theta, linear_approx, label='θ', color='red', linestyle='--')\nax1.set_xlabel(r'$\\theta$ [rad]')\nax1.set_ylabel(r'$\\sin(x),x$')\nax1.legend()\n\n# Plot the error on the second subplot\nax2.plot(theta, error, label='Absolute Error', color='green')\nax2.set_xlabel(r'$\\theta$ [rad]')\nax2.set_ylabel('|sin(θ) - θ|')\nax2.legend()\n\n# Adjust the layout and display the plot\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Visualization of the paraxial approximation plotting the $\\sin(\\theta)$ and the linear approximation $\\theta$ (dashed line) for angles ranging from 0 to $\\pi/2$ radians.](01-lecture01_files/figure-html/cell-8-output-1.png){width=703 height=368}\n:::\n:::\n\n\n:::\n\nTo derive the imaging equation, we analyze how light from a point object forms an image after refraction. Consider two special rays from an off-axis point:\n\n::: {#fig-image-curved fig-align=\"center\"}\n![](img/image_curved.png){width=80%}\n\nImage formation at a curved surface.\n:::\n\nFor a ray parallel to the optical axis ($\\theta_1=0$):\n\n$$\\theta_2=\\frac{n_2-n_1}{n_2}\\frac{y}{R}=\\frac{y+\\Delta y}{b}$$\n\nFor a ray through the center of curvature ($y=0$):\n\n$$n_2\\frac{\\Delta y}{b}=n_1\\frac{y}{a}$$\n\nCombining these equations yields the fundamental imaging equation for a spherical surface:\n\n$$\\frac{n_1}{a}+\\frac{n_2}{b}=\\frac{n_2-n_1}{R}$$\n\nFrom this, we define the **focal length** of the spherical surface:\n\n$$f=\\frac{n_2}{n_2-n_1}R$$\n\n::: {.callout-note}\n## Imaging Equation for Spherical Refracting Surface\n\nThe sum of the inverse object and image distances equals the inverse focal length of the spherical refracting surface:\n\n$$\\frac{n_1}{a}+\\frac{n_2}{b}\\approx\\frac{n_2}{f}$$\n\nwhere the focal length of the refracting surface is given by:\n\n$$f=\\frac{n_2}{n_2-n_1}R$$\n\nin the paraxial approximation.\n:::\n\n### Thin Lens\n\nA lens consists of two spherical surfaces in close proximity. To analyze how a lens forms images, we consider refraction at both surfaces:\n\n::: {#fig-thin-lens-refraction fig-align=\"center\"}\n![](img/thin_lens.png){width=60%}\n\nRefraction on two spherical surfaces.\n:::\n\nWhen the lens thickness $d$ is much smaller than the radii of curvature ($d \\ll R_1, R_2$), we can apply the **thin lens approximation**. This assumes:\n1. The ray height at both surfaces is approximately equal ($y \\approx y'$)\n2. All refraction effectively occurs at a single plane (the **principal plane**)\n3. The change in angle is additive from both surfaces\n\nThis approximation, combined with the sign convention for radii (positive for convex surfaces facing incoming light, negative for concave), leads to the thin lens formula:\n\n::: {.callout-note}\n## Imaging Equation for Thin Lens\n\nThe sum of the inverse object and image distances equals the inverse focal length of the thin lens:\n\n$$\\frac{1}{a}+\\frac{1}{b}=\\frac{1}{f}$$\n\nwhere:\n\n$$\\frac{1}{f}=\\frac{n_2-n_1}{n_1}\\left(\\frac{1}{R_1}-\\frac{1}{R_2}\\right)$$\n:::\n\nThis can be rearranged to give the **lensmaker equation**:\n\n::: {.callout-note}\n## Lensmaker Equation\nThe focal length of a thin lens is calculated by:\n$$f=\\frac{n_1}{n_2-n_1}\\left(\\frac{R_1 R_2}{R_2-R_1}\\right)$$\n\nin the paraxial approximation.\n:::\n\n#### Image Construction and Magnification\n\nTo construct the image formed by a lens, we typically trace two or three special rays:\n1. A ray parallel to the optical axis, which passes through the far focal point after refraction\n2. A ray through the center of the lens, which passes undeflected\n3. A ray through the near focal point, which emerges parallel to the optical axis\n\nThe intersection of these rays locates the image position:\n\n::: {#fig-thin-lens-imaging fig-align=\"center\"}\n![](img/thin_lens_imaging.png){width=60%}\n\nImage construction on a thin lens.\n:::\n\nThe ratio of image height to object height defines the **magnification**:\n\n::: {.callout-note}\n## Magnification of a Lens\n\nThe magnification is given by:\n\n$$M=\\frac{h_{\\rm image}}{h_{\\rm object}}=-\\frac{b}{a}=\\frac{f}{f-a}$$\n\nwhere the negative sign indicates image inversion for real images.\n:::\n\nThe image characteristics depend on the object distance relative to the focal length:\n\n| Object Position | Image Characteristics | Magnification (M) | Image Type |\n|-----------------|------------------------|-------------------|------------|\n| $a < f$         | Upright and magnified  | $M > 0$           | Virtual    |\n| $f < a < 2f$    | Inverted and magnified | $M < -1$          | Real       |\n| $a = 2f$        | Inverted, same size    | $M = -1$          | Real       |\n| $a > 2f$        | Inverted and reduced   | $-1 < M < 0$      | Real       |\n| $a = f$         | Image at infinity      | $M = \\infty$      | -          |\n\nThe diagram below illustrates these various imaging scenarios for a biconvex lens:\n\n|<img src=\"img/image_construction.png\" width=\"100%\">|\n|-|\n|**Fig.:** Image construction on a biconvex lens with a parallel and a central ray for different object distances.|\n\n\n\n\n::: {.callout-note collapse=\"true\"}\n## Matrix Optics\nThe above derived equations for a single spherical surface yield a linear relation between the input variables $y_1$ and $\\theta_1$ and the output variables $y_2$ and $\\theta_2$.\nThe linear relation yields a great opportunity to express optical elements in terms of linear transformations (matrices). This is the basis of **matrix optics**. The matrix representation of a lens is given by\n\n$$\\begin{pmatrix} y_2 \\\\ \\theta_2 \\end{pmatrix} = \\begin{pmatrix} 1 & 0 \\\\ -\\frac{1}{f} & 1 \\end{pmatrix} \\begin{pmatrix} y_1 \\\\ \\theta_1 \\end{pmatrix}$$\n\nwhere the matrix is called the **ABCD matrix** of the lens. Due to the linearization of Snells law w can write down more generally\n\n$$\\begin{pmatrix} y_2 \\\\\n\\theta_2 \\end{pmatrix} = \\begin{pmatrix} A & B \\\\ C & D \\end{pmatrix} \\begin{pmatrix} y_1 \\\\ \\theta_1 \\end{pmatrix}$$\n\nand one can obtain a Matrix for all types of optical elements such as free space of dustance $d$.\n\n$$\\begin{bmatrix}\nA & B\\\\\nC & D\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n1 & d\\\\\n0 & 1\n\\end{bmatrix}\n$$\n\nHere are some useful matrices for optical elements:\n\n\n$$\n\\mathbf{M}=\\left[\\begin{array}{ll}\n1 & d \\\\\n0 & 1\n\\end{array}\\right] \\tag{Free space}\n$$\n\n\n$$\n\\mathbf{M}=\\left[\\begin{array}{cc}\n1 & 0 \\\\\n0 & \\frac{n_1}{n_2}\n\\end{array}\\right] \\tag{Planar interface}\n$$\n\n\n$$\n\\mathbf{M}=\\left[\\begin{array}{cc}\n1 & 0 \\\\\n-\\frac{\\left(n_2-n_1\\right)}{n_2 R} & \\frac{n_1}{n_2}\n\\end{array}\\right] \\tag{Spherical Boundary}\n$$\n\n$$\n\\mathbf{M}=\\left[\\begin{array}{cc}\n1 & 0 \\\\\n-\\frac{1}{f} & 1\n\\end{array}\\right] \\tag{Tin Lens}\n$$\n\nIf we have now a system of optical elements, we can multiply the matrices of the individual elements to obtain the matrix of the whole system.\n\n$$\n\\rightarrow \\mathrm{M}_1 \\rightarrow \\mathrm{M}_2 \\rightarrow \\mathrm{M}_N \\rightarrow \\mathrm{M}=\\mathbf{M}_N \\ldots \\mathrm{M}_2 \\mathbf{M}_1 \\text {. }\n$$\n\nThis is a very powerful tool to analyze optical systems.\n:::\n\n\n<!-- ## Wave Optics (20 minutes)-->\n\n\n\n<!-- ## Wave Optics (20 minutes)\n- Wave equation derivation\n- Harmonic waves and their properties\n- Wave parameters: wavelength, frequency, amplitude\n- Superposition principle\n- Interference phenomena\n  - Constructive and destructive interference\n  - Young's double-slit experiment\n- Wave optics applications\n- Eikonal Theory and its applications\n-->\n\n\n## Fermat's Principle for Spherical Surfaces\n\nThe power of Fermat's principle becomes particularly evident when applied to spherical refracting surfaces. Consider a spherical boundary of radius $R$ between two media with refractive indices $n_1$ and $n_2$. According to Fermat's principle, light will follow the path that minimizes the total optical path length.\n\n::: {#cell-fig-fermat-spherical .cell execution_count=8}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Arc, Wedge\nimport matplotlib.patches as patches\n\n# Set up the figure\nfig, ax = plt.subplots(figsize=get_size(15, 10))\n\n# Parameters\nR = 3  # Radius of the spherical surface\nn1 = 1.0  # Refractive index of first medium\nn2 = 1.5  # Refractive index of second medium\narc_angle = 100  # Arc angle in degrees\ncenter_x = 3  # Center of arc is to the right of the boundary\n\n# Define the center of the sphere\ncenter = (center_x, 0)\n\n# Calculate arc angles in radians\nstart_angle = 180 - arc_angle/2\nend_angle = 180 + arc_angle/2\n\n# Draw the spherical surface as an arc\narc = Arc(center, 2*R, 2*R, theta1=start_angle, theta2=end_angle,\n          color='black', linewidth=1.5)\nax.add_patch(arc)\n\n# Calculate the x-coordinate of the leftmost point of the arc\nboundary_x = center_x - R * np.cos(np.radians(90 - arc_angle/2))\n\n# Draw the media boundary\nax.fill_between([-8, boundary_x], [-8, -8], [8, 8], color='lightblue', alpha=0.2)\nax.fill_between([boundary_x, 12], [-8, -8], [8, 8], color='lightgreen', alpha=0.2)\nax.axvline(x=boundary_x, color='black', linestyle='-', linewidth=1)\n\n# Add labels for the media\nax.text(boundary_x-3, 3, f\"n₁ = {n1}\", fontsize=12)\nax.text(boundary_x+2, 3, f\"n₂ = {n2}\", fontsize=12)\n\n# Mark object and image points\nobject_point = (boundary_x-3, 0)\nimage_point = (center_x+6, 0)\nax.plot(object_point[0], object_point[1], 'bo', markersize=8, label='Object (A)')\nax.plot(image_point[0], image_point[1], 'ro', markersize=8, label='Image (B)')\n\n# Calculate different potential paths along the arc\ntheta_rad = np.linspace(np.radians(start_angle), np.radians(end_angle), 15)\npaths = []\noptical_lengths = []\n\nfor theta in theta_rad:\n    # Position on the arc\n    x = center_x + R * np.cos(theta)\n    y = R * np.sin(theta)\n\n    # Calculate distances\n    d1 = np.sqrt((x - object_point[0])**2 + (y - object_point[1])**2)\n    d2 = np.sqrt((x - image_point[0])**2 + (y - image_point[1])**2)\n\n    # Calculate optical path length\n    optical_length = n1 * d1 + n2 * d2\n\n    paths.append((x, y))\n    optical_lengths.append(optical_length)\n\n# Find the minimum optical path\nmin_index = np.argmin(optical_lengths)\nmin_path = paths[min_index]\n\n# Plot all potential paths\nfor i, (x, y) in enumerate(paths):\n    if i == min_index:\n        continue\n    ax.plot([object_point[0], x, image_point[0]], [object_point[1], y, image_point[1]],\n             'gray', linestyle='--', alpha=0.5, linewidth=0.8)\n\n# Plot the path of minimum optical length (Fermat's principle)\nax.plot([object_point[0], min_path[0], image_point[0]], [object_point[1], min_path[1], image_point[1]],\n         'red', linewidth=2, label='Minimum optical path')\n\n\n# Set up the main plot\nax.set_xlim(-4, 12)\nax.set_ylim(-4, 4)\nax.set_xlabel('Position')\nax.set_ylabel('Height')\nax.grid(True, alpha=0.3)\nax.axhline(y=0, color='gray', linestyle='--', alpha=0.7)\nax.legend(loc='lower right')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Fermat's principle applied to a spherical refracting surface](01-lecture01_files/figure-html/fig-fermat-spherical-output-1.png){#fig-fermat-spherical width=552 height=364}\n:::\n:::\n\n\nWhen we apply Fermat's principle to a spherical surface, we can derive the laws of refraction. Consider a spherical boundary between two media with refractive indices $n_1$ and $n_2$. We'll place our coordinate system so that the spherical surface intersects the x-axis at x=0, with radius R and its center at position (R,0) to the right.\n\nFor a point P on the spherical surface at height y from the optical axis, the total optical path length from object point A at (-a,0) to image point B at (b,0) is:\n\n$$L = n_1|AP| + n_2|PB|$$\n\nwhere:\n$$|AP| = \\sqrt{a^2 + y^2}$$\n$$|PB| = \\sqrt{b^2 + y^2}$$\n\nAccording to Fermat's principle, light follows the path where this length is stationary:\n\n$$\\frac{dL}{dy} = n_1\\frac{d|AP|}{dy} + n_2\\frac{d|PB|}{dy} = 0$$\n\nComputing these derivatives:\n\n$$\\frac{d|AP|}{dy} = \\frac{y}{|AP|}$$\n$$\\frac{d|PB|}{dy} = \\frac{y}{|PB|}$$\n\nSubstituting into our condition:\n\n$$n_1\\frac{y}{|AP|} + n_2\\frac{y}{|PB|} = 0$$\n\nThis equation is incorrect. The right-hand side should not be zero because we need to account for the geometry of the spherical surface. The correct form includes the effect of the surface normal:\n\n$$n_1\\frac{y}{|AP|} + n_2\\frac{y}{|PB|} = \\frac{(n_2-n_1)y}{R}$$\n\nThis correction comes from the fact that at point P, the normal to the spherical surface makes an angle α with the optical axis, where sin(α) ≈ y/R in the paraxial approximation.\n\nDividing by y (assuming y≠0):\n\n$$\\frac{n_1}{|AP|} + \\frac{n_2}{|PB|} = \\frac{n_2-n_1}{R}$$\n\nIn the paraxial approximation, we can use |AP| ≈ a and |PB| ≈ b, yielding:\n\n$$\\frac{n_1}{a} + \\frac{n_2}{b} = \\frac{n_2-n_1}{R}$$\n\nThis is the correct imaging equation for a spherical refracting surface.\n\nThe elegance of Fermat's principle is preserved, as it still naturally produces the same result as our geometric derivation, once we properly account for the geometry of the refracting surface.\n\n\n:::{.callout-note collapse=true}\n### Deriving the Thin Lens Equation from Fermat's Principle\n\nTo derive the thin lens equation, we apply Fermat's principle to the two spherical surfaces that make up a lens. Consider a lens with refractive index $n_2$ in a medium of index $n_1$, with surface radii $R_1$ and $R_2$.\n\nThe total optical path for a ray passing through the lens at height $y$ from the optical axis is:\n- Path from object to first surface: $n_1 s_1$\n- Path through the lens: $n_2 s_2$\n- Path from second surface to image: $n_1 s_3$\n\nFor a thin lens, the optical path length simplifies to:\n\n$$L(y) = n_1 \\sqrt{a^2 + y^2} + n_2 d(y) + n_1 \\sqrt{b^2 + y^2}$$\n\nWhere $d(y)$ is the thickness of the lens at height $y$, which can be approximated as:\n\n$$d(y) \\approx d_0 + \\frac{y^2}{2}\\left(\\frac{1}{R_1}-\\frac{1}{R_2}\\right)$$\n\nApplying Fermat's principle ($\\frac{dL}{dy} = 0$) and using the paraxial approximation:\n\n$$\\frac{n_1 y}{\\sqrt{a^2 + y^2}} + n_2 y \\left(\\frac{1}{R_1}-\\frac{1}{R_2}\\right) + \\frac{n_1 y}{\\sqrt{b^2 + y^2}} = 0$$\n\nIn the paraxial limit ($y \\ll a, y \\ll b$), this becomes:\n\n$$\\frac{n_1 y}{a} + n_2 y \\left(\\frac{1}{R_1}-\\frac{1}{R_2}\\right) + \\frac{n_1 y}{b} = 0$$\n\nDividing by $y$ and rearranging:\n\n$$\\frac{1}{a} + \\frac{1}{b} = \\frac{n_2-n_1}{n_1}\\left(\\frac{1}{R_1}-\\frac{1}{R_2}\\right) = \\frac{1}{f}$$\n\nThis is the thin lens equation with the focal length given by the lensmaker's equation:\n\n$$f = \\frac{n_1}{n_2-n_1}\\left(\\frac{R_1 R_2}{R_2-R_1}\\right)$$\n\nThus, both the imaging equation and the lensmaker equation emerge naturally from Fermat's principle applied to the geometry of a thin lens, showing that light follows paths of equal optical length from object to image when passing through any part of the lens.\n\nFrom a wave perspective, what makes a lens focus light to a point is that all paths from object to image through any part of the lens have equal optical path lengths (to first order in the paraxial approximation), ensuring constructive interference at the image point.\n:::\n\n",
    "supporting": [
      "01-lecture01_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}