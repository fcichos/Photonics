{
  "hash": "95a19a26548f278eb867de977455fe02",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Theories of Light\"\njupyter: python3\nformat:\n  html:\n    toc: true\n    toc-location: right\n    fig-cap-location: bottom\ncrossref:\n  fig-title: Figure\n  tbl-title: Table\n  title-delim: \"—\"\n  fig-prefix: Figure\n  eq-prefix: Equation\n  chapters: true\n  fig-labels: arabic\n---\n\n\n\n<!-- ## Ray Optics (20 minutes) -->\n\n## Ray Optics\n\nRay optics, or geometric optics, provides a powerful framework for understanding light propagation when the wavelength is much **smaller than the dimensions of optical elements** involved. In this approach, light travels along straight lines called rays in homogeneous media, with well-defined paths that can be mathematically traced. This description serves as the foundation for analyzing many optical systems, from simple mirrors to complex microscopes and telescopes.\n\nThe cornerstone of ray optics is **Fermat's Principle**, which states that light follows the path that minimizes the optical path length or, equivalently, the time of travel between two points. Mathematically, if we consider a path $C$ connecting points A and B, Fermat's Principle requires:\n\n$$\\delta\\int_C n(s)ds = 0$$\n\nwhere $n(s)$ is the refractive index along the path and $ds$ is the differential path length. This variational principle leads directly to the laws of reflection and refraction.\n\n::: {#cell-fig-fermat-reflection .cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\ndef calculate_path_length(x, start, end):\n    \"\"\"Calculate the total path length from start to point x to end\"\"\"\n    d1 = np.sqrt((x - start[0])**2 + (start[1])**2)\n    d2 = np.sqrt((end[0] - x)**2 + (end[1])**2)\n    return d1 + d2\n\n# Set up the figure\nfig, ax = plt.subplots(figsize=get_size(15, 10))\n\n# Define start and end points\nstart_point = (-4, 3)\nend_point = (4, 3)\n\n# X positions for different possible paths\nx_positions = np.linspace(-3.5, 3.5, 15)\n\n# Calculate path lengths\npath_lengths = [calculate_path_length(x, start_point, end_point) for x in x_positions]\n\n# Find the minimum path (Fermat's principle)\nmin_index = np.argmin(path_lengths)\nmin_x = x_positions[min_index]\n\n# Plot the horizontal line (interface)\nax.axhline(y=0, color='black', linestyle='-', linewidth=1)\n\n# Plot all possible paths\nfor i, x in enumerate(x_positions):\n    if i == min_index:\n        continue  # Skip the minimum path for now\n\n    # Create path\n    verts = [\n        start_point,\n        (x, 0),\n        end_point\n    ]\n    codes = [\n        Path.MOVETO,\n        Path.LINETO,\n        Path.LINETO\n    ]\n    path = Path(verts, codes)\n    patch = patches.PathPatch(path, facecolor='none', edgecolor='gray',\n                             linestyle='--', lw=0.5,alpha=0.65)\n    ax.add_patch(patch)\n\n# Plot the minimum path (Fermat's Principle)\nverts = [\n    start_point,\n    (min_x, 0),\n    end_point\n]\ncodes = [\n    Path.MOVETO,\n    Path.LINETO,\n    Path.LINETO\n]\npath = Path(verts, codes)\npatch = patches.PathPatch(path, facecolor='none', edgecolor='red',\n                         linestyle='-')\nax.add_patch(patch)\n\n# Add dots for the points\nax.plot(start_point[0], start_point[1], 'bo', label='start point')\nax.plot(end_point[0], end_point[1], 'go',  label='end point')\nax.plot(min_x, 0, 'ro',  label='reflection Point')\n\n# Set labels and title\nax.set_xlabel('x-position')\nax.set_ylabel('y-position')\nax.text(-0.7, -1, \"mirror\")\n\n# Set plot limits and legend\nax.set_xlim(-5, 5)\nax.set_ylim(-4, 4)\nax.set_aspect('equal')\nax.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Fermat's principle for reflection of light at an interface](01-lecture01_files/figure-html/fig-fermat-reflection-output-1.svg){#fig-fermat-reflection}\n:::\n:::\n\n\n**Reflection** For reflection at a planar interface, we can derive the law of reflection by considering a ray traveling from point A to point B via reflection at point P on a mirror. The total path length is $L = |AP| + |PB|$. According to Fermat's Principle, the actual path minimizes $L$, so we set:\n\n$$\\frac{dL}{dx} = 0$$\n\nwhere $x$ is the position of P. After calculus manipulation, this yields the familiar law of reflection:\n\n$$\\theta_i = \\theta_r$$\n\nwhere $\\theta_i$ is the angle of incidence and $\\theta_r$ is the angle of reflection, both measured from the normal to the surface.\n\n::: {#cell-fig-fermat-refraction .cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\ndef calculate_optical_path(x, start, end, n1, n2):\n    \"\"\"Calculate the total optical path length from start to point x to end\"\"\"\n    d1 = n1 * np.sqrt((x - start[0])**2 + (start[1])**2)  # Optical path in medium 1\n    d2 = n2 * np.sqrt((end[0] - x)**2 + (end[1])**2)      # Optical path in medium 2\n    return d1 + d2\n\n# Set up the figure\nfig, ax = plt.subplots(figsize=get_size(15, 10))\n\n# Define start and end points\nstart_point = (-4, 3)\nend_point = (4, -3)\n\n# Define refractive indices\nn1 = 1.0  # Medium 1 (above interface)\nn2 = 1.5  # Medium 2 (below interface)\n\n# X positions for different possible paths\nx_positions = np.linspace(-3.5, 3.5, 15)\n\n# Calculate optical path lengths\noptical_paths = [calculate_optical_path(x, start_point, end_point, n1, n2) for x in x_positions]\n\n# Find the minimum path (Fermat's principle)\nmin_index = np.argmin(optical_paths)\nmin_x = x_positions[min_index]\n\n# Plot the horizontal line (interface)\nax.axhline(y=0, color='black', linestyle='-', linewidth=1)\n\n# Plot all possible paths\nfor i, x in enumerate(x_positions):\n    if i == min_index:\n        continue  # Skip the minimum path for now\n\n    # Create path\n    verts = [\n        start_point,\n        (x, 0),\n        end_point\n    ]\n    codes = [\n        Path.MOVETO,\n        Path.LINETO,\n        Path.LINETO\n    ]\n    path = Path(verts, codes)\n    patch = patches.PathPatch(path, facecolor='none', edgecolor='gray',\n                             linestyle='--', lw=0.5, alpha=0.65)\n    ax.add_patch(patch)\n\n# Plot the minimum path (Fermat's Principle)\nverts = [\n    start_point,\n    (min_x, 0),\n    end_point\n]\ncodes = [\n    Path.MOVETO,\n    Path.LINETO,\n    Path.LINETO\n]\npath = Path(verts, codes)\npatch = patches.PathPatch(path, facecolor='none', edgecolor='red',\n                         linestyle='-', lw=1)\nax.add_patch(patch)\n\n# Add dots for the points\nax.plot(start_point[0], start_point[1], 'bo', label='start')\nax.plot(end_point[0], end_point[1], 'go', label='end')\nax.plot(min_x, 0, 'ro', label='refraction')\n\n# Calculate and draw angles\n# Incident ray\ndx1 = min_x - start_point[0]\ndy1 = 0 - start_point[1]\nincident_angle = np.arctan2(-dy1, dx1)\ntheta1 = np.pi/2 - incident_angle\n\n# Refracted ray\ndx2 = end_point[0] - min_x\ndy2 = end_point[1] - 0\nrefracted_angle = np.arctan2(dy2, dx2)\ntheta2 = np.pi/2 + refracted_angle\n\n# Draw angle arcs\n\n# Add angle labels\nax.text(min_x + 0.3, 0.3, r'$\\theta_1$', color='blue')\nax.text(min_x - 0.5, -0.3, r'$\\theta_2$', color='green')\n\n# Set labels and title\nax.set_xlabel('x-position')\nax.set_ylabel('y-position')\nax.text(-3, 0.5, f\"n₁ = {n1}\", color='blue')\nax.text(-3, -0.5, f\"n₂ = {n2}\", color='green')\n\n# Set plot limits and legend\nax.set_xlim(-5, 5)\nax.set_ylim(-4, 4)\nax.set_aspect('equal')\nax.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Snell's Law from Fermat's Principle](01-lecture01_files/figure-html/fig-fermat-refraction-output-1.svg){#fig-fermat-refraction}\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n### Destructive Interference of Non-Minimal Paths\nWe can demonstrate that all paths except the shortest one interfere destructively using Feynman's path integral formulation. In this approach, light takes all possible paths between points A and B, with each path contributing an amplitude with phase $e^{iS/\\hbar}$, where $S$ is the action proportional to the optical path length: $S = kL$ where $k = 2\\pi/\\lambda$ is the wave number.\n\nTo understand why non-minimal paths cancel out, let's denote the minimal path as $x_0(t)$ and nearby paths as $x_0(t) + \\delta x(t)$, where $\\delta x(t)$ represents small deviations. The action for these perturbed paths expands as:\n$$S[x_0 + \\delta x] = S[x_0] + \\frac{\\delta S}{\\delta x}\\bigg|_{x_0} \\delta x + \\frac{1}{2}\\frac{\\delta^2 S}{\\delta x^2}\\bigg|_{x_0} (\\delta x)^2 + ...$$\n\nSince $x_0$ is the extremal path (according to Fermat's principle), we have $\\frac{\\delta S}{\\delta x}\\bigg|_{x_0} = 0$. This means the first-order term vanishes, leaving the quadratic term as the leading contribution to the phase difference:\n\n$$\\Delta\\phi = S[x] - S[x_0] \\approx \\frac{1}{2}\\frac{\\delta^2 S}{\\delta x^2}\\bigg|_{x_0} (\\delta x)^2$$\n\nThis quadratic dependence is crucial: as we move away from the minimal path, the phase difference increases as the square of the deviation $\\delta x$. When we consider a specific deviation $\\delta x_c$ where $\\Delta\\phi = \\pi$, paths will contribute with exactly opposite phases compared to the minimal path, leading to destructive interference:\n\n$$\\frac{1}{2}\\frac{\\delta^2 S}{\\delta x^2}\\bigg|_{x_0} (\\delta x_c)^2 = \\pi$$\n\nFor even larger deviations, the phase differences continue to increase, creating alternating bands of constructive and destructive interference. When summed over all possible paths, these rapidly varying phases cancel each other out.\n\nFor paths far from the minimal one, the destructive interference is even more pronounced. Mathematically, we can demonstrate this by considering a continuous distribution of paths with optical path lengths $L$. The total amplitude contribution from these paths is given by:\n\n$$A = \\int e^{ikL(x)} dx$$\n\nFor non-minimal paths, we can parametrize the path length as $L(x) = L_0 + \\alpha(x-x_0)^2$ for some constant $\\alpha$, where $x_0$ corresponds to the minimal path. The amplitude becomes:\n\n$$A = \\int e^{ik(L_0 + \\alpha(x-x_0)^2)} dx = e^{ikL_0}\\int e^{ik\\alpha(x-x_0)^2} dx$$\n\nThis integral evaluates to:\n\n$$A = e^{ikL_0}\\sqrt{\\frac{\\pi}{k\\alpha}}e^{i\\pi/4}$$\n\nThe key insight is that the amplitude scales as $1/\\sqrt{k\\alpha}$, which means that as the curvature $\\alpha$ of the path length function increases (as happens far from the minimal path), the contribution to the total amplitude diminishes. This mathematically proves why non-minimal path regions contribute negligibly to the overall path integral.\n\nThis cancellation mechanism explains why light appears to follow only the path of least time in ray optics. The mathematics shows that constructive interference occurs only for paths very close to the minimal path, while all other paths destructively interfere with their neighbors. This phenomenon emerges naturally from wave properties without requiring quantum mechanical constants like ℏ. We can express this classically by setting $S = kL$ and observing how path differences relative to the wavelength create interference patterns.\n\n::: {#cell-fig-phase .cell execution_count=4}\n``` {.python .cell-code code-fold=\"true\"}\nfrom matplotlib import cm\n\n# Parameters\nnum_paths = 100\nmin_path_index = num_paths // 2\npath_deviation = np.linspace(-2, 2, num_paths)  # Deviation from minimal path\nalpha = 5  # Curvature parameter controlling phase variation rate\n\n# Calculate phase for each path (quadratic dependence on deviation)\nphases = alpha * path_deviation**2\n\n# Set up the figure\nfig, ax = plt.subplots(figsize=get_size(14, 8))\n\n# Plot phase vs path deviation with a simple blue line and points\nax.plot(path_deviation, phases, '-', color='blue', linewidth=2)\n\n# Highlight the minimal path\nax.axvline(x=0, color='r', linestyle='--', linewidth=2, label='Minimal path')\n\n# Highlight paths near minimal path\nnear_minimal = np.abs(path_deviation) < 0.3\n#ax.scatter(path_deviation[near_minimal], phases[near_minimal],\n#          color='green', s=70, label='Near minimal path', zorder=3)\n\n# Set labels and grid\nax.set_xlabel('path deviation')\nax.set_ylabel('phase [rad]')\n\n\n# Add horizontal lines at multiples of π to show constructive/destructive interference\nfor i in range(int(np.max(phases)/np.pi) + 1):\n    if i == 0:\n        ax.axhline(y=i*np.pi, color='k', linestyle='-', alpha=0.2,\n                  label='Constructive interference')\n    elif i % 2 == 0:\n        ax.axhline(y=i*np.pi, color='k', linestyle='-', alpha=0.2)\n    else:\n        ax.axhline(y=i*np.pi, color='k', linestyle='--', alpha=0.2,\n                  label='Destructive interference' if i==1 else None)\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Visualization of path phases in Fermat's principle. The figure shows how the phase varies with path deviation from the minimal path (marked by the vertical red line at zero). The quadratic relationship between phase and path deviation demonstrates why paths near the minimal one constructively interfere (similar phases), while non-minimal paths tend to cancel through destructive interference (rapidly varying phases).](01-lecture01_files/figure-html/fig-phase-output-1.svg){#fig-phase}\n:::\n:::\n\n\n:::\n\n\n**Refraction** Similarly, for refraction between two media with refractive indices $n_1$ and $n_2$, the optical path length is:\n\n$$L = n_1|AP| + n_2|PB|$$\n\nApplying Fermat's Principle and solving the resulting equation leads to Snell's law:\n\n$$n_1\\sin\\theta_1 = n_2\\sin\\theta_2$$\n\nwhere $\\theta_1$ and $\\theta_2$ are the angles of incidence and refraction, respectively.\n\nThese fundamental laws allow us to analyze the formation of images by various optical systems. For instance, in a thin lens with focal length $f$, we can establish the relationship between object distance $s_o$, image distance $s_i$, and focal length through the lens equation:\n\n$$\\frac{1}{s_o} + \\frac{1}{s_i} = \\frac{1}{f}$$\n\nThis equation enables us to predict image formation characteristics in optical instruments such as cameras, microscopes, and telescopes.\n\nDespite its power, ray optics has limitations. It cannot explain phenomena like diffraction, which occurs when light encounters obstacles or apertures comparable to its wavelength. Here, we need wave optics for a complete description. Additionally, ray optics fails to account for the finite width of beams and the existence of evanescent waves.\n\n::: {#cell-fig-lens .cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\"}\n# Set up the figure\nfig, ax = plt.subplots(figsize=get_size(18,7))\n\n# Define lens parameters\nf = 2  # focal length\nh_obj = 1.5  # object height\ns_o = 6  # object distance\ns_i = 1/(1/f - 1/s_o)  # image distance from lens formula\nh_img = -h_obj * s_i/s_o  # image height\n\n# Plot optical axis\nax.axhline(y=0, color='black', linestyle='-')\n\n# Plot lens\nlens_height = 3\nax.plot([0, 0], [-lens_height/2, lens_height/2], 'k-')\n# Add curved edges to represent a lens\ncurve_x = np.linspace(-0.1, 0, 20)\ncurve_y1 = lens_height/2 * np.sqrt(1 - (curve_x/0.1)**2)\ncurve_y2 = -lens_height/2 * np.sqrt(1 - (curve_x/0.1)**2)\nax.plot(curve_x, curve_y1, 'k-')\nax.plot(curve_x, curve_y2, 'k-')\n\n# Plot focal points\nax.plot(f, 0, 'ko', markersize=4)\nax.plot(-f, 0, 'ko', markersize=4)\nax.text(f, -0.4, r'$F$', fontsize=10)\nax.text(-f, -0.4, r\"$F'$\", fontsize=10)\n\n# Plot object and image\nax.arrow(-s_o, 0, 0, h_obj-0.1, head_width=0.1, head_length=0.1, fc='blue', ec='blue')\nax.arrow(s_i, 0, 0, h_img+0.1, head_width=0.1, head_length=0.1, fc='red', ec='red')\nax.text(-s_o+0.1, h_obj/2, r'object', color='blue', fontsize=9)\nax.text(s_i+0.1, h_img/2, r'image', color='red', fontsize=9)\n\n# Principal rays\n# Ray 1: Parallel to axis, through focal point\nax.plot([-s_o, 0], [h_obj, h_obj], 'b-', label='parallel to axis → through F')\nax.plot([0, s_i], [h_obj, h_img], 'b-')\n\n# Ray 2: Through center, unchanged direction\nax.plot([-s_o, s_i], [h_obj, h_img], 'g-',  label='through center')\n\n# Ray 3: Through focal point, parallel to axis\nax.plot([-s_o, 0], [h_obj, 0], 'r-', label='through F → parallel to axis')\nax.plot([0, s_i], [0, h_img], 'r-')\n\n# Add lens equation\nequation_text = r\"$\\frac{1}{s_o} + \\frac{1}{s_i} = \\frac{1}{f}$\"\nax.text(-5, -1.5, equation_text, fontsize=14, bbox=dict(facecolor='white', lw=0,\n    alpha=0.7))\n\n# Labels showing values\nax.text(-s_o/2, 0.2, f\"$s_o = {s_o}$\")\nax.text(s_i/2, 0.4, f\"$s_i = {s_i:.2f}$\")\nax.text(0, -2, f\"$f = {f}$\")\n\n# Set plot limits and aspect ratio\nax.set_xlim(-s_o-1, s_i+1)\nax.set_ylim(-2.5, 2.5)\n#ax.set_aspect('equal')\n\n# Axis labels\nax.set_xlabel('position')\nax.set_ylabel('height')\n\n# Add legend for principal rays\n#ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=3, fontsize=8)\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Ray diagram for a thin lens showing object and image formation](01-lecture01_files/figure-html/fig-lens-output-1.svg){#fig-lens}\n:::\n:::\n\n\n<!-- ## Wave Optics (20 minutes)\n- Wave equation derivation\n- Harmonic waves and their properties\n- Wave parameters: wavelength, frequency, amplitude\n- Superposition principle\n- Interference phenomena\n  - Constructive and destructive interference\n  - Young's double-slit experiment\n- Wave optics applications\n- Eikonal Theory and its applications\n-->\n\n\n### Differential Description of Fermat's Principle\n\nWhile we've discussed Fermat's principle in its integral form, it can also be expressed as a differential equation that describes the path of light rays. This approach reveals how ray trajectories emerge from the underlying variational principle.\n\nStarting with Fermat's principle that light follows the path of least optical path length:\n\n$$\\delta\\int_C n(s)ds = 0$$\n\nWe can derive the differential equation governing the ray path. If we parametrize the ray path as $\\mathbf{r}(s)$ where $s$ is the arc length, then the ray equation becomes:\n\n$$\\frac{d}{ds}\\left(n\\frac{d\\mathbf{r}}{ds}\\right) = \\nabla n$$\n\nThis equation states that the rate of change of the momentum vector ($n\\frac{d\\mathbf{r}}{ds}$) equals the gradient of the refractive index. In a medium with constant refractive index ($\\nabla n = 0$), this simplifies to:\n\n$$\\frac{d^2\\mathbf{r}}{ds^2} = 0$$\n\nThis confirms that light rays follow straight lines in homogeneous media.\n\nFor a medium with a continuously varying refractive index $n(x,y,z)$, the ray equation becomes:\n\n$$\\frac{d}{ds}\\left(n\\frac{d\\mathbf{r}}{ds}\\right) = \\nabla n$$\n\nThis differential form of Fermat's principle is particularly useful in gradient-index optics, where the refractive index changes continuously throughout the medium, causing light rays to follow curved paths. Examples include optical fibers with graded-index profiles and the atmosphere where temperature gradients create mirages.\n\n::: {.callout-note collapse=\"true\"}\n### Deriving the Differential Form from the Integral Principle\n\nTo derive the differential ray equation from Fermat's integral principle, we apply the calculus of variations. Starting with the optical path length functional:\n\n$$L = \\int_C n(s)ds = \\int_{t_1}^{t_2} n(\\mathbf{r}(t)) \\left|\\frac{d\\mathbf{r}}{dt}\\right| dt$$\n\nWhere $\\mathbf{r}(t)$ parametrizes the path. The term $\\left|\\frac{d\\mathbf{r}}{dt}\\right|$ represents the differential element of arc length $ds$ along the path, so $ds = \\left|\\frac{d\\mathbf{r}}{dt}\\right| dt$. This parametrization allows us to convert the path integral over the curve $C$ into a definite integral over the parameter $t$. According to Fermat's principle, the true path makes this integral stationary (δL = 0).\n\nConsider a small variation in the path: $\\mathbf{r}(t) \\rightarrow \\mathbf{r}(t) + \\epsilon\\mathbf{\\eta}(t)$ where $\\mathbf{\\eta}(t_1) = \\mathbf{\\eta}(t_2) = 0$ (fixed endpoints). Expanding the variation of the integral to first order in ε:\n\n$$\\delta L = \\frac{d}{d\\epsilon}\\bigg|_{\\epsilon=0} \\int_{t_1}^{t_2} n(\\mathbf{r}(t) + \\epsilon\\mathbf{\\eta}(t)) \\left|\\frac{d}{dt}(\\mathbf{r}(t) + \\epsilon\\mathbf{\\eta}(t))\\right| dt$$\n\nUsing the chain rule and reparametrizing with arc length $s$ (where $\\frac{d\\mathbf{r}}{ds}$ is a unit vector), the stationarity condition leads to:\n\n$$\\int_C \\left[ \\nabla n \\cdot \\mathbf{\\eta} - \\frac{d}{ds}\\left(n\\frac{d\\mathbf{r}}{ds}\\right) \\cdot \\mathbf{\\eta} \\right] ds = 0$$\n\nSince this must hold for any variation $\\mathbf{\\eta}$, we obtain the Euler-Lagrange equation:\n\n$$\\frac{d}{ds}\\left(n\\frac{d\\mathbf{r}}{ds}\\right) = \\nabla n$$\n\nThis is the ray equation in differential form. It shows that rays bend toward regions of higher refractive index, directly analogous to how a mechanical particle's trajectory is affected by a potential field in classical mechanics.\n:::\n\n\n\n### Thin Lenses and Fermat's Principle\n\nWe can show that a thin lens obeys Fermat's principle by considering the optical path length for rays passing through different points of the lens. For a thin lens with a biconvex spherical surface of radius $R$, the thickness $d(y)$ varies with the distance $y$ from the optical axis according to:\n\n$$d(y) \\approx d_0 - \\frac{y^2}{2R}$$\n\nwhere $d_0$ is the thickness at the center. For a converging lens, the thickness decreases as we move away from the optical axis.\n\nLet's consider a ray from object point $O$ passing through the lens at height $y$ and reaching the image point $I$. The total optical path length is:\n\n$$L(y) = n_1 \\cdot |OP| + n_2 \\cdot d(y) + n_1 \\cdot |PI|$$\n\nwhere $n_1$ is the refractive index of the surrounding medium (usually air, $n_1 \\approx 1$) and $n_2$ is the refractive index of the lens material.\n\n::: {#cell-fig-lens-fermat .cell execution_count=6}\n``` {.python .cell-code code-fold=\"true\"}\n# Set up the figure\nfig, ax = plt.subplots(figsize=get_size(18, 8))\n\n# Define parameters\nf = 2  # focal length\nn_lens = 1.5  # refractive index of lens\nd0 = 0.1  # thickness at center\nobject_distance = 4\nimage_distance = 1/(1/f - 1/object_distance)  # from lens equation\n\n# Function to calculate optical path length through lens at height y\ndef optical_path(y, obj_dist, img_dist, n, d0, f):\n    # Approximate lens thickness at height y\n    d_y = d0 * (1 + y**2/(2*f*d0*(n-1)))\n\n    # Distance from object to lens entry point\n    d1 = np.sqrt(obj_dist**2 + y**2)\n\n    # Distance from lens exit point to image\n    d2 = np.sqrt(img_dist**2 + y**2)\n\n    # Total path length (air + lens + air)\n    return d1 + (n-1)*d_y + d2\n\n# Calculate optical paths for different heights\ny_values = np.linspace(-1.5, 1.5, 30)\npath_lengths = [optical_path(y, object_distance, image_distance, n_lens, d0, f) for y in y_values]\n\n# Find minimum path\nmin_index = np.argmin(path_lengths)\npath_diff = np.array(path_lengths) - min(path_lengths)\n\n# Plot lens shape (exaggerated for visibility)\nlens_width = 0.2\nx_lens = np.linspace(-lens_width/2, lens_width/2, 100)\ny_lens = np.linspace(-2, 2, 100)\nXX, YY = np.meshgrid(x_lens, y_lens)\nlens_shape = d0 + YY**2/(2*f*d0*(n_lens-1))\nlens_shape = lens_shape * lens_width/lens_shape.max()\n\n# Draw lens\nax.fill_between([-lens_shape.max()/2, lens_shape.max()/2], [-2, -2], [2, 2], color='lightblue', alpha=0.3)\nax.plot([-lens_width/4, lens_width/4], [0, 0], 'b-', linewidth=2)  # Optical axis\n\n# Plot object and image points\nax.plot(-object_distance, 0, 'bo', markersize=8, label='object')\nax.plot(image_distance, 0, 'ro', markersize=8, label='image')\n\n# Draw some example rays\nfor i, y in enumerate(y_values[::5]):\n    if i == len(y_values[::5])//2:  # Highlight central ray\n        color = 'green'\n        lw = 2\n        label1 = 'minimal path'\n    else:\n        color = 'gray'\n        lw = 0.8\n        label1 = None\n\n    # Draw ray from object through lens to image\n    ax.plot([-object_distance, 0, image_distance], [0, y, 0], color=color, linewidth=lw, label=label1)\n\n# Plot optical path length vs height - moved to bottom-right corner with more room\nax2 = ax.inset_axes([0.7, 0.75, 0.28, 0.22])  # Adjusted position and size\nax2.plot(y_values, path_diff * 1000, 'k-')  # Convert to mm for visibility\nax2.set_xlabel('height on lens (y)', fontsize=8)\nax2.set_ylabel(r'$\\Delta L$ (mm)', fontsize=8)\nax2.tick_params(axis='both', which='major', labelsize=7)\nax2.grid(True, alpha=0.3)\nax2.axhline(y=0, color='r', linestyle='--', alpha=0.5)\n\n# Set main plot properties\nax.set_xlim(-object_distance*1.1, image_distance*1.1)\nax.set_ylim(-2.5, 2.5)\nax.set_xlabel('position along optical axis')\nax.set_ylabel('height')\nax.axvline(x=0, color='k', linestyle='--', alpha=0.3)  # Mark lens position\n#ax.text(0.5, 2, \"n = \" + str(n_lens))\nax.legend(loc='upper left')  # Moved legend to upper left to avoid overlap\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Demonstration of Fermat's principle in a thin lens](01-lecture01_files/figure-html/fig-lens-fermat-output-1.svg){#fig-lens-fermat}\n:::\n:::\n\n\nApplying Fermat's principle, we require that $\\frac{dL}{dy} = 0$ for the actual ray path. After differentiation and algebraic manipulation, we arrive at:\n\n$$\\frac{y}{|OP|} + \\frac{y}{|PI|} = \\frac{y(n_2-n_1)}{R}$$\n\nThis is equivalent to the lens maker's formula when combined with the small-angle approximation. The parabolic thickness profile of the lens ensures that all rays from the object point arrive at the image point with the same optical path length (to first order), satisfying Fermat's principle.\n\nThe lens thus acts as a path equalizer - rays taking different paths through the lens all require the same travel time, which creates the focusing effect. This is why a properly designed lens can form a perfect image: it ensures constructive interference of all waves at the image point by making all optical paths equal.\n\n\n\n<!-- ## Wave Optics (20 minutes)-->\n\n",
    "supporting": [
      "01-lecture01_files"
    ],
    "filters": [],
    "includes": {}
  }
}