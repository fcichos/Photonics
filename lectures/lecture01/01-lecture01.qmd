---
#title: "Theories of Light"
jupyter: python3
format:
  html:
    toc: true
    toc-location: right
    fig-cap-location: bottom
crossref:
  fig-title: Figure
  tbl-title: Table
  title-delim: "—"
  fig-prefix: Figure
  eq-prefix: Equation
  chapters: true
  fig-labels: arabic
---

```{python}
# | echo: false
## just for plotting later
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.path import Path
import matplotlib.patches as patches


from matplotlib_inline.backend_inline import set_matplotlib_formats
set_matplotlib_formats('svg')

plt.rcParams.update({'font.size': 12,
                     'axes.titlesize': 12,
                     'axes.labelsize': 12,
                     'lines.linewidth': 1,
                     'lines.markersize': 5,
                     'xtick.labelsize' : 12,
                     'ytick.labelsize' : 12,
                     'xtick.top' : True,
                     'xtick.direction' : 'in',
                     'ytick.right' : True,
                     'ytick.direction' : 'in',})

def get_size(w,h):
    return((w/2.54,h/2.54))
```

<!-- ## Ray Optics (20 minutes) -->

## Theories for light

Light has been described through increasingly sophisticated theoretical frameworks throughout the history of physics. The simplest framework is *Ray Optics* or *Geometrical Optics*, which treats light as rays traveling along straight paths and applies geometrical principles to describe interactions with optical elements like lenses and mirrors. Moving beyond this approximation, *Wave Optics* introduces the wave nature of light, explaining phenomena such as interference and diffraction that ray optics cannot address. *Electromagnetic Optics* further refines our understanding by treating light as electromagnetic waves governed by Maxwell's equations, providing a complete classical description of light-matter interactions. For intense light sources, *Nonlinear Optics* becomes essential, describing how materials respond nonlinearly to strong electromagnetic fields, giving rise to frequency conversion and other novel effects. Finally, at the most fundamental level, *Quantum Optics* treats light as consisting of photons—quantum mechanical particles exhibiting both wave and particle properties—essential for understanding phenomena like spontaneous emission, entanglement, and the quantum nature of light-matter interactions. This course will progressively build your understanding through these increasingly sophisticated frameworks.

### Ray Optics

Ray optics, or geometric optics, provides a powerful framework for understanding light propagation when the wavelength is much **smaller than the dimensions of optical elements** involved. In this approach, light travels along straight lines called rays in homogeneous media, with well-defined paths that can be mathematically traced. This description serves as the foundation for analyzing many optical systems, from simple mirrors to complex microscopes and telescopes.

#### Fermat's Principle: Integral and Differential Forms

**Fermat's Principle** forms the foundation of ray optics, stating that light travels along the route that minimizes the total optical path length between any two points. This optical path length, expressed mathematically as $\int_C n(s)ds$, represents the effective distance light traverses through media of varying refractive indices. When this quantity is divided by the vacuum speed of light $c_0$, it yields the total travel time required for light to journey between those points.

In its integral form:

$$\delta\int_C n(s)ds = 0$$

where $n(s)$ is the refractive index along path $C$ and $ds$ is the differential path length.


The same principle can be expressed as a differential equation that describes how light bends in media with varying refractive indices:

$$\frac{d}{ds}\left(n\frac{d\mathbf{r}}{ds}\right) = \nabla n$$

This equation shows that rays bend toward regions of higher refractive index. In homogeneous media ($\nabla n = 0$), it simplifies to $\frac{d^2\mathbf{r}}{ds^2} = 0$, confirming that light follows straight lines.

#### Optical Laws Derived from Fermat's Principle

**Reflection**: At a planar interface, Fermat's Principle directly yields the law of reflection:

$$\theta_i = \theta_r$$

where $\theta_i$ is the angle of incidence and $\theta_r$ is the angle of reflection, both measured from the normal to the surface.

```{python}
#| echo: true
#| code-fold: true
#| label: fig-fermat-reflection
#| fig-cap: Fermat's principle for reflection of light at an interface

def calculate_path_length(x, start, end):
    """Calculate the total path length from start to point x to end"""
    d1 = np.sqrt((x - start[0])**2 + (start[1])**2)
    d2 = np.sqrt((end[0] - x)**2 + (end[1])**2)
    return d1 + d2

# Set up the figure
fig, ax = plt.subplots(figsize=get_size(15, 10))

# Define start and end points
start_point = (-4, 3)
end_point = (4, 3)

# X positions for different possible paths
x_positions = np.linspace(-3.5, 3.5, 15)

# Calculate path lengths
path_lengths = [calculate_path_length(x, start_point, end_point) for x in x_positions]

# Find the minimum path (Fermat's principle)
min_index = np.argmin(path_lengths)
min_x = x_positions[min_index]

# Plot the horizontal line (interface)
ax.axhline(y=0, color='black', linestyle='-', linewidth=1)

# Plot all possible paths
for i, x in enumerate(x_positions):
    if i == min_index:
        continue  # Skip the minimum path for now

    # Create path
    verts = [
        start_point,
        (x, 0),
        end_point
    ]
    codes = [
        Path.MOVETO,
        Path.LINETO,
        Path.LINETO
    ]
    path = Path(verts, codes)
    patch = patches.PathPatch(path, facecolor='none', edgecolor='gray',
                             linestyle='--', lw=0.5,alpha=0.65)
    ax.add_patch(patch)

# Plot the minimum path (Fermat's Principle)
verts = [
    start_point,
    (min_x, 0),
    end_point
]
codes = [
    Path.MOVETO,
    Path.LINETO,
    Path.LINETO
]
path = Path(verts, codes)
patch = patches.PathPatch(path, facecolor='none', edgecolor='red',
                         linestyle='-')
ax.add_patch(patch)

# Add dots for the points
ax.plot(start_point[0], start_point[1], 'bo', label='start point')
ax.plot(end_point[0], end_point[1], 'go',  label='end point')
ax.plot(min_x, 0, 'ro',  label='reflection Point')

# Set labels and title
ax.set_xlabel('x-position')
ax.set_ylabel('y-position')
ax.text(-0.7, -1, "mirror")

# Set plot limits and legend
ax.set_xlim(-5, 5)
ax.set_ylim(-4, 4)
ax.set_aspect('equal')
ax.legend()

plt.tight_layout()
plt.show()
```



**Refraction**: Between media with different refractive indices, Fermat's Principle yields Snell's law:

$$n_1\sin\theta_1 = n_2\sin\theta_2$$

where $\theta_1$ and $\theta_2$ are the angles of incidence and refraction, respectively.


```{python}
#| echo: true
#| code-fold: true
#| label: fig-fermat-refraction
#| fig-cap: Snell's Law from Fermat's Principle

def calculate_optical_path(x, start, end, n1, n2):
    """Calculate the total optical path length from start to point x to end"""
    d1 = n1 * np.sqrt((x - start[0])**2 + (start[1])**2)  # Optical path in medium 1
    d2 = n2 * np.sqrt((end[0] - x)**2 + (end[1])**2)      # Optical path in medium 2
    return d1 + d2

# Set up the figure
fig, ax = plt.subplots(figsize=get_size(15, 10))

# Define start and end points
start_point = (-4, 3)
end_point = (4, -3)

# Define refractive indices
n1 = 1.0  # Medium 1 (above interface)
n2 = 1.5  # Medium 2 (below interface)

# X positions for different possible paths
x_positions = np.linspace(-3.5, 3.5, 15)

# Calculate optical path lengths
optical_paths = [calculate_optical_path(x, start_point, end_point, n1, n2) for x in x_positions]

# Find the minimum path (Fermat's principle)
min_index = np.argmin(optical_paths)
min_x = x_positions[min_index]

# Plot the horizontal line (interface)
ax.axhline(y=0, color='black', linestyle='-', linewidth=1)

# Plot all possible paths
for i, x in enumerate(x_positions):
    if i == min_index:
        continue  # Skip the minimum path for now

    # Create path
    verts = [
        start_point,
        (x, 0),
        end_point
    ]
    codes = [
        Path.MOVETO,
        Path.LINETO,
        Path.LINETO
    ]
    path = Path(verts, codes)
    patch = patches.PathPatch(path, facecolor='none', edgecolor='gray',
                             linestyle='--', lw=0.5, alpha=0.65)
    ax.add_patch(patch)

# Plot the minimum path (Fermat's Principle)
verts = [
    start_point,
    (min_x, 0),
    end_point
]
codes = [
    Path.MOVETO,
    Path.LINETO,
    Path.LINETO
]
path = Path(verts, codes)
patch = patches.PathPatch(path, facecolor='none', edgecolor='red',
                         linestyle='-', lw=1)
ax.add_patch(patch)

# Add dots for the points
ax.plot(start_point[0], start_point[1], 'bo', label='start')
ax.plot(end_point[0], end_point[1], 'go', label='end')
ax.plot(min_x, 0, 'ro', label='refraction')

# Calculate and draw angles
# Incident ray
dx1 = min_x - start_point[0]
dy1 = 0 - start_point[1]
incident_angle = np.arctan2(-dy1, dx1)
theta1 = np.pi/2 - incident_angle

# Refracted ray
dx2 = end_point[0] - min_x
dy2 = end_point[1] - 0
refracted_angle = np.arctan2(dy2, dx2)
theta2 = np.pi/2 + refracted_angle

# Draw angle arcs

# Add angle labels
ax.text(min_x + 0.3, 0.3, r'$\theta_1$', color='blue')
ax.text(min_x - 0.5, -0.3, r'$\theta_2$', color='green')

# Set labels and title
ax.set_xlabel('x-position')
ax.set_ylabel('y-position')
ax.text(-3, 0.5, f"n₁ = {n1}", color='blue')
ax.text(-3, -0.5, f"n₂ = {n2}", color='green')

# Set plot limits and legend
ax.set_xlim(-5, 5)
ax.set_ylim(-4, 4)
ax.set_aspect('equal')
ax.legend()

plt.tight_layout()
plt.show()
```


::: {.callout-note collapse="true"}
### Detailed Derivations from Fermat's Principle

#### Reflection Law Derivation
For reflection at a planar interface, we consider a ray traveling from point A to point B via reflection at point P on a mirror. The total path length is $L = |AP| + |PB|$. According to Fermat's Principle, the actual path minimizes $L$, so we set:

$$\frac{dL}{dx} = 0$$

where $x$ is the position of P along the mirror. This leads to the condition that the angle of incidence equals the angle of reflection.

**Law of Reflection**: The angle of incidence equals the angle of reflection.
$$\theta_i = \theta_r$$

#### Refraction Law Derivation
For refraction between two media, the optical path length is:

$$L = n_1|AP| + n_2|PB|$$

Applying the minimization condition $\frac{dL}{dx} = 0$ yields Snell's law.

**Snell's Law**: The ratio of the sines of the angles of incidence and refraction equals the reciprocal of the ratio of the refractive indices.
$$n_1\sin\theta_1 = n_2\sin\theta_2$$

#### Differential Form Derivation
To derive the differential ray equation from Fermat's integral principle, we apply the calculus of variations. Starting with the optical path length functional:

$$L = \int_C n(s)ds = \int_{t_1}^{t_2} n(\mathbf{r}(t)) \left|\frac{d\mathbf{r}}{dt}\right| dt$$

Where $\mathbf{r}(t)$ parametrizes the path. The term $\left|\frac{d\mathbf{r}}{dt}\right|$ represents the differential element of arc length $ds$ along the path, so $ds = \left|\frac{d\mathbf{r}}{dt}\right| dt$. This parametrization allows us to convert the path integral over the curve $C$ into a definite integral over the parameter $t$. According to Fermat's principle, the true path makes this integral stationary (δL = 0).

Consider a small variation in the path: $\mathbf{r}(t) \rightarrow \mathbf{r}(t) + \epsilon\mathbf{\eta}(t)$ where $\mathbf{\eta}(t_1) = \mathbf{\eta}(t_2) = 0$ (fixed endpoints). Expanding the variation of the integral to first order in ε:

$$\delta L = \frac{d}{d\epsilon}\bigg|_{\epsilon=0} \int_{t_1}^{t_2} n(\mathbf{r}(t) + \epsilon\mathbf{\eta}(t)) \left|\frac{d}{dt}(\mathbf{r}(t) + \epsilon\mathbf{\eta}(t))\right| dt$$

Using the chain rule and reparametrizing with arc length $s$ (where $\frac{d\mathbf{r}}{ds}$ is a unit vector), the stationarity condition leads to:

$$\int_C \left[ \nabla n \cdot \mathbf{\eta} - \frac{d}{ds}\left(n\frac{d\mathbf{r}}{ds}\right) \cdot \mathbf{\eta} \right] ds = 0$$

Since this must hold for any variation $\mathbf{\eta}$, we obtain the Euler-Lagrange equation:

$$\frac{d}{ds}\left(n\frac{d\mathbf{r}}{ds}\right) = \nabla n$$

This shows that rays bend toward regions of higher refractive index, directly analogous to how a mechanical particle's trajectory is affected by a potential field in classical mechanics.
:::


### Lenses

The most important optical elements are lenses, which come in many different flavors. They consist of curved surfaces, which most commonly have the shape of a part of a spherical cap. It is, therefore, useful to have a look at the refraction at spherical surfaces.

#### Refraction at spherical surfaces

For our calculations of the refraction at spherical surfaces, we consider the sketch below.

::: {#fig-curved-surface fig-align="center"}
![](img/curved_surface.png){width=80%}

Refraction at a curved surface.
:::

To derive an imaging equation for a lens, we aim to calculate the distance $b$ and angle $\theta_2$ at which a ray crosses the optical axis, given its origin at distance $a$ and angle $\theta_1$. We begin with Snell's law for the geometry:

$$n_{1}\sin(\alpha+\theta_1)=n_{2}\sin(\alpha-\theta_2)$$

We define key relationships:

$$\sin(\alpha)=\frac{y}{R}, \quad \tan(\theta_1)=\frac{y}{a}, \quad \tan(\theta_2)=\frac{y}{b}$$

To simplify this, we employ the **paraxial approximation**, which assumes all angles are small. This allows us to use first-order approximations of trigonometric functions, effectively linearizing them:

$$\sin(\theta) \approx \theta+ O(\theta^{3}), \quad \tan(\theta) \approx \theta + O(\theta^{3}),\quad \cos(\theta)\approx 1 + O(\theta^{2})$$

This approach, common in optics, significantly simplifies our calculations while maintaining accuracy for most practical scenarios involving lenses.

With the help of these approximations we can write Snell's law for the curved surface as

$$n_1(\alpha+\theta_1)=n_2(\alpha-\theta_2).$$

With some slight transformation which you will find in the video of the online lecture we obtain, therefore,

$$\theta_2=\frac{n_2-n_1}{n_2 R}y -\frac{n_1}{n_2}\theta_1,$$

which is a purely linear equation in $y$ and $\theta_1$.

::: {.callout-note collapse="true" #paraxial-approximation}
### Paraxial Approximation

The paraxial approximation is a fundamental simplification in optics that assumes all angles are small. This allows us to use linear approximations for trigonometric functions, significantly simplifying calculations while maintaining accuracy for most practical scenarios involving lenses.

To visualize the validity of this approximation, let's examine two plots:

1. The first plot compares sin(θ) (blue line) with its linear approximation θ (red dashed line) for angles ranging from 0 to π/2 radians.
2. The second plot shows the absolute error between sin(θ) and θ.

These plots demonstrate that:

1. For small angles (roughly up to 0.5 radians or about 30 degrees), the approximation is very close to the actual sine function.
2. The error increases rapidly for larger angles, indicating the limitations of the paraxial approximation.

In most optical systems, especially those involving lenses, the angles of incident and refracted rays are typically small enough for this approximation to be valid. However, it's important to be aware of its limitations when dealing with wide-angle optical systems or scenarios where precision is critical.

```{python}
#| code-fold: true
#| fig-cap: "Visualization of the paraxial approximation plotting the $\\sin(\\theta)$ and the linear approximation $\\theta$ (dashed line) for angles ranging from 0 to $\\pi/2$ radians."
import numpy as np
import matplotlib.pyplot as plt
# Define the range of angles (in radians)
theta = np.linspace(0, np.pi/2, 1000)

# Calculate sin(theta) and theta (linear approximation)
sin_theta = np.sin(theta)
linear_approx = theta

# Calculate the absolute error
error = np.abs(sin_theta - linear_approx)

# Create the plot with two subplots side by side
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(7.5, 4))

# Plot sin(theta) and theta on the first subplot
ax1.plot(theta, sin_theta, label='sin(θ)', color='blue')
ax1.plot(theta, linear_approx, label='θ', color='red', linestyle='--')
ax1.set_xlabel(r'$\theta$ [rad]')
ax1.set_ylabel(r'$\sin(x),x$')
ax1.legend()

# Plot the error on the second subplot
ax2.plot(theta, error, label='Absolute Error', color='green')
ax2.set_xlabel(r'$\theta$ [rad]')
ax2.set_ylabel('|sin(θ) - θ|')
ax2.legend()

# Adjust the layout and display the plot
plt.tight_layout()
plt.show()
```
:::

Consider light originating from a point at distance $y$ from the optical axis. We'll analyze two rays: one traveling parallel to the optical axis and hitting the spherical surface at height $y$, and another incident at $y=0$.

::: {#fig-image-curved fig-align="center"}
![](img/image_curved.png){width=80%}

Image formation at a curved surface.
:::

Applying our derived formula to these two cases:

For the parallel ray ($\theta_1=0$):

$$\theta_2=\frac{n_2-n_1}{n_2}\frac{y}{R}$$
$$\theta_2=\frac{y+\Delta y}{b}$$

Equating these expressions:

$$\frac{y+\Delta y}{b}=\frac{n_2-n_1}{n_2}\frac{y}{R}$$

For the ray through the center ($y=0$):

$$n_2\frac{\Delta y}{b}=n_1\frac{y}{a}$$

Combining these equations yields the imaging equation for a curved surface:

$$\frac{n_1}{a}+\frac{n_2}{b}=\frac{n_2-n_1}{R}$$

We can define a new quantity, the **focal length**, which depends only on the properties of the curved surface:

$$f=\frac{n_2}{n_2-n_1}R$$

::: {.callout-note}
## Imaging Equation for Spherical Refracting Surface

The sum of the inverse object and image distances equals the inverse focal length of the spherical refracting surface:

$$\frac{n_1}{a}+\frac{n_2}{b}\approx\frac{n_2}{f}$$

where the focal length of the refracting surface is given by:

$$f=\frac{n_2}{n_2-n_1}R$$

in the paraxial approximation.
:::

### Thin lens

In our previous calculation we have found a linear relation between the incident angle $\theta_1$ with the optical axis, the incident height of the ray $y$ and the outgoing angle $\theta_2$:

Analyzing refraction in a lens involves two spherical surfaces. Light initially travels from a medium with refractive index $n_1$ into the lens material with index $n_2$. The first surface's radius, $R_1$, is typically positive for a convex surface facing the incident light.

At the second surface, the outgoing angle from the first refraction becomes the incident angle for the second refraction. Here, light travels from $n_2$ back into $n_1$. The radius $R_2$ of this surface often has a negative value in a converging lens due to its opposite curvature relative to the optical axis.

::: {#fig-thin-lens-refraction fig-align="center"}
![](img/thin_lens.png){width=60%}

Refraction on two spherical surfaces.
:::

For thin lenses, where the thickness $d$ is much smaller than $R_1$ and $R_2$ ($d \ll R_1, R_2$), we can simplify our analysis. We assume that the height of the ray at both surfaces is approximately equal ($y \approx y'$), neglecting the displacement inside the lens.

This simplification allows us to treat all refraction as occurring on a single plane at the lens center, known as the **principal plane**. This concept, illustrated by the dashed line in the figure, greatly simplifies optical calculations and ray tracing for thin lenses.

The radii's sign convention (positive for convex surfaces facing incident light, negative for concave) and this two-surface analysis form the basis for the thin lens formula. This formula relates object distance, image distance, and focal length, encapsulating the lens's imaging properties.

The result of the above calculation is leading to the imaging equation for the thin lens.

::: {.callout-note}
## Imaging Equation for Thin Lens

The sum of the inverse object and image distances equals the inverse focal length of the thin lens:

$$\frac{1}{a}+\frac{1}{b}\approx\frac{n_2-n_1}{n_1}\left (\frac{1}{R_1}-\frac{1}{R_2}\right )=\frac{1}{f}$$
:::

::: {.callout-note}
## Lensmaker equation
The focal length of a thin lens is calculated by the **lensmaker equation**:
$$f=\frac{n_1}{n_2-n_1}\left ( \frac{R_1 R_2}{R_2 -R_1}\right)$$

in the paraxial approximation.
:::



#### Image Construction

Images of objects can be now constructed if we refer to rays which do not emerge from a position on the optical axis only. In this case, we consider three different rays (two are actually enough). If we use as in the case of a concave mirror a central and a parallel ray, we will find a position where all rays cross on the other side. The conversion of the rays is exactly the same as in the case of a spherical mirror. The relation between the position of the object and the image along the optical axis is described by the imaging equation.

::: {#fig-thin-lens-imaging fig-align="center"}
![](img/thin_lens_imaging.png){width=60%}

Image construction on a thin lens.
:::

Similar to the concave mirror, we may now also find out the image size or the magnification of the lens.

::: {.callout-note}
## Magnification of a Lens

The magnification is given by:

$$M=\frac{h_{\rm image}}{h_{\rm object}}=-\frac{b}{a}=\frac{f}{f-a}$$

where the negative sign is the result of the reverse orientation of the real images created by a lens.
:::

According to our previous consideration $M<0$ corresponds to a reversed image, while it is upright as the object for $M>0$. We, therefore, easily see the following:

| Object Position | Image Characteristics | Magnification (M) | Image Type |
|-----------------|------------------------|-------------------|------------|
| $a < f$         | Upright and magnified  | $M > 0$           | Virtual    |
| $f < a < 2f$    | Reversed and magnified | $M < -1$          | Real       |
| $a = 2f$        | Reversed, same size    | $M = -1$          | Real       |
| $a > 2f$        | Reversed and shrunk    | $-1 < M < 0$      | Real       |
| $a = f$         | Appears at infinity    | $M = \infty$      | -          |


The image below illustrates the construction of images in 4 of the above cases for a bi-convex lens, including the generation of a virtual image.

|<img src="img/image_construction.png" width="100%">|
|-|
|**Fig.:** Image construction on a biconvex lens with a parallel and a central ray for different object distances.|

### Thick lens

For a thin lens, the displacement of the beam in height ($y,y^{\prime}$) due to the thickness has been neglected. That means that we can reduce all refracting action of the lens to a single plane, which we call a principle plane. This approximation is (independent of the paraxial approximation) not anymore true for lenses if the displacement $\Delta$ of the ray as in the image below cannot be neglected. Such lenses are called **thick lenses** and they do not have a single principle plane anymore. In fact, the principle plane splits up into two principle planes at a distance $h$.

::: {#fig-thick-lens-planes fig-align="center"}
![](img/thick_lens.png){width=80%}

Thick lens principal planes.
:::

As indicated in the sketch above, an incident ray which is not deflected can be extended to its intersection with the optical axis at a point, which is a distance $h_1$ behind the lens surface. This is the location for the first principle plane. The position of the second principle plane at a distance $h_2$ before the back surface is found for by reversing the ray path. According to that, both principle planes have a distance $h=d-h_1+h_2$ (mind the sign of the $h$). Using some mathematical effort, one can show that the same imaging equation as for a thins lens can be used with a new definition of the focal length and taking into account that object and image distances refer to their principle planes.


### Thin Lenses and Fermat's Principle

We can show that a thin lens obeys Fermat's principle by considering the optical path length for rays passing through different points of the lens. For a thin lens with a biconvex spherical surface of radius $R$, the thickness $d(y)$ varies with the distance $y$ from the optical axis according to:

$$d(y) \approx d_0 - \frac{y^2}{2R}$$

where $d_0$ is the thickness at the center. For a converging lens, the thickness decreases as we move away from the optical axis.

Let's consider a ray from object point $O$ passing through the lens at height $y$ and reaching the image point $I$. The total optical path length is:

$$L(y) = n_1 \cdot |OP| + n_2 \cdot d(y) + n_1 \cdot |PI|$$

where $n_1$ is the refractive index of the surrounding medium (usually air, $n_1 \approx 1$) and $n_2$ is the refractive index of the lens material.

```{python}
#| echo: true
#| code-fold: true
#| label: fig-lens-fermat
#| fig-cap: Demonstration of Fermat's principle in a thin lens

# Set up the figure
fig, ax = plt.subplots(figsize=get_size(18, 8))

# Define parameters
f = 2  # focal length
n_lens = 1.5  # refractive index of lens
d0 = 0.1  # thickness at center
object_distance = 4
image_distance = 1/(1/f - 1/object_distance)  # from lens equation

# Function to calculate optical path length through lens at height y
def optical_path(y, obj_dist, img_dist, n, d0, f):
    # Approximate lens thickness at height y
    d_y = d0 * (1 + y**2/(2*f*d0*(n-1)))

    # Distance from object to lens entry point
    d1 = np.sqrt(obj_dist**2 + y**2)

    # Distance from lens exit point to image
    d2 = np.sqrt(img_dist**2 + y**2)

    # Total path length (air + lens + air)
    return d1 + (n-1)*d_y + d2

# Calculate optical paths for different heights
y_values = np.linspace(-1.5, 1.5, 30)
path_lengths = [optical_path(y, object_distance, image_distance, n_lens, d0, f) for y in y_values]

# Find minimum path
min_index = np.argmin(path_lengths)
path_diff = np.array(path_lengths) - min(path_lengths)

# Plot lens shape (exaggerated for visibility)
lens_width = 0.2
x_lens = np.linspace(-lens_width/2, lens_width/2, 100)
y_lens = np.linspace(-2, 2, 100)
XX, YY = np.meshgrid(x_lens, y_lens)
lens_shape = d0 + YY**2/(2*f*d0*(n_lens-1))
lens_shape = lens_shape * lens_width/lens_shape.max()

# Draw lens
ax.fill_between([-lens_shape.max()/2, lens_shape.max()/2], [-2, -2], [2, 2], color='lightblue', alpha=0.3)
ax.plot([-lens_width/4, lens_width/4], [0, 0], 'b-', linewidth=2)  # Optical axis

# Plot object and image points
ax.plot(-object_distance, 0, 'bo', markersize=8, label='object')
ax.plot(image_distance, 0, 'ro', markersize=8, label='image')

# Draw some example rays
for i, y in enumerate(y_values[::5]):
    if i == len(y_values[::5])//2:  # Highlight central ray
        color = 'green'
        lw = 2
        label1 = 'minimal path'
    else:
        color = 'gray'
        lw = 0.8
        label1 = None

    # Draw ray from object through lens to image
    ax.plot([-object_distance, 0, image_distance], [0, y, 0], color=color, linewidth=lw, label=label1)

# Plot optical path length vs height - moved to bottom-right corner with more room
ax2 = ax.inset_axes([0.7, 0.75, 0.28, 0.22])  # Adjusted position and size
ax2.plot(y_values, path_diff * 1000, 'k-')  # Convert to mm for visibility
ax2.set_xlabel('height on lens (y)', fontsize=8)
ax2.set_ylabel(r'$\Delta L$ (mm)', fontsize=8)
ax2.tick_params(axis='both', which='major', labelsize=7)
ax2.grid(True, alpha=0.3)
ax2.axhline(y=0, color='r', linestyle='--', alpha=0.5)

# Set main plot properties
ax.set_xlim(-object_distance*1.1, image_distance*1.1)
ax.set_ylim(-2.5, 2.5)
ax.set_xlabel('position along optical axis')
ax.set_ylabel('height')
ax.axvline(x=0, color='k', linestyle='--', alpha=0.3)  # Mark lens position
#ax.text(0.5, 2, "n = " + str(n_lens))
ax.legend(loc='upper left')  # Moved legend to upper left to avoid overlap

plt.show()
```

Applying Fermat's principle, we require that $\frac{dL}{dy} = 0$ for the actual ray path. After differentiation and algebraic manipulation, we arrive at:

$$\frac{y}{|OP|} + \frac{y}{|PI|} = \frac{y(n_2-n_1)}{R}$$

This is equivalent to the lens maker's formula when combined with the small-angle approximation. The parabolic thickness profile of the lens ensures that all rays from the object point arrive at the image point with the same optical path length (to first order), satisfying Fermat's principle.

The lens thus acts as a path equalizer - rays taking different paths through the lens all require the same travel time, which creates the focusing effect. This is why a properly designed lens can form a perfect image: it ensures constructive interference of all waves at the image point by making all optical paths equal.



::: {.callout-note collapse="true"}
## Matrix Optics
The above derived equations for a single spherical surface yield a linear relation between the input variables $y_1$ and $\theta_1$ and the output variables $y_2$ and $\theta_2$.
The linear relation yields a great opportunity to express optical elements in terms of linear transformations (matrices). This is the basis of **matrix optics**. The matrix representation of a lens is given by

$$\begin{pmatrix} y_2 \\ \theta_2 \end{pmatrix} = \begin{pmatrix} 1 & 0 \\ -\frac{1}{f} & 1 \end{pmatrix} \begin{pmatrix} y_1 \\ \theta_1 \end{pmatrix}$$

where the matrix is called the **ABCD matrix** of the lens. Due to the linearization of Snells law w can write down more generally

$$\begin{pmatrix} y_2 \\
\theta_2 \end{pmatrix} = \begin{pmatrix} A & B \\ C & D \end{pmatrix} \begin{pmatrix} y_1 \\ \theta_1 \end{pmatrix}$$

and one can obtain a Matrix for all types of optical elements such as free space of dustance $d$.

$$\begin{bmatrix}
A & B\\
C & D
\end{bmatrix}
=
\begin{bmatrix}
1 & d\\
0 & 1
\end{bmatrix}
$$

Here are some useful matrices for optical elements:


$$
\mathbf{M}=\left[\begin{array}{ll}
1 & d \\
0 & 1
\end{array}\right] \tag{Free space}
$$


$$
\mathbf{M}=\left[\begin{array}{cc}
1 & 0 \\
0 & \frac{n_1}{n_2}
\end{array}\right] \tag{Planar interface}
$$


$$
\mathbf{M}=\left[\begin{array}{cc}
1 & 0 \\
-\frac{\left(n_2-n_1\right)}{n_2 R} & \frac{n_1}{n_2}
\end{array}\right] \tag{Spherical Boundary}
$$

$$
\mathbf{M}=\left[\begin{array}{cc}
1 & 0 \\
-\frac{1}{f} & 1
\end{array}\right] \tag{Tin Lens}
$$

If we have now a system of optical elements, we can multiply the matrices of the individual elements to obtain the matrix of the whole system.

$$
\rightarrow \mathrm{M}_1 \rightarrow \mathrm{M}_2 \rightarrow \mathrm{M}_N \rightarrow \mathrm{M}=\mathbf{M}_N \ldots \mathrm{M}_2 \mathbf{M}_1 \text {. }
$$

This is a very powerful tool to analyze optical systems.
:::


<!-- ## Wave Optics (20 minutes)-->



<!-- ## Wave Optics (20 minutes)
- Wave equation derivation
- Harmonic waves and their properties
- Wave parameters: wavelength, frequency, amplitude
- Superposition principle
- Interference phenomena
  - Constructive and destructive interference
  - Young's double-slit experiment
- Wave optics applications
- Eikonal Theory and its applications
-->


## Fermat's Principle for Spherical Surfaces

The power of Fermat's principle becomes particularly evident when applied to spherical refracting surfaces. Consider a spherical boundary of radius $R$ between two media with refractive indices $n_1$ and $n_2$. According to Fermat's principle, light will follow the path that minimizes the total optical path length.

For a ray traveling from point $A$ in medium 1 to point $B$ in medium 2, refracted at point $P$ on the spherical surface, the total optical path length is:

$$L = n_1|AP| + n_2|PB|$$

For the actual path taken by light, we require:

$$\frac{dL}{d\phi} = 0$$

where $\phi$ is the angular position of point $P$ on the spherical surface.

```{python}
#| echo: true
#| code-fold: true
#| label: fig-fermat-spherical
#| fig-cap: Fermat's principle applied to a spherical refracting surface

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Arc, Wedge
import matplotlib.patches as patches

# Set up the figure
fig, ax = plt.subplots(figsize=get_size(15, 10))

# Parameters
R = 3  # Radius of the spherical surface
n1 = 1.0  # Refractive index of first medium
n2 = 1.5  # Refractive index of second medium
arc_angle = 100  # Arc angle in degrees
center_x = 3  # Center of arc is to the right of the boundary

# Define the center of the sphere
center = (center_x, 0)

# Calculate arc angles in radians
start_angle = 180 - arc_angle/2
end_angle = 180 + arc_angle/2

# Draw the spherical surface as an arc
arc = Arc(center, 2*R, 2*R, theta1=start_angle, theta2=end_angle,
          color='black', linewidth=1.5)
ax.add_patch(arc)

# Calculate the x-coordinate of the leftmost point of the arc
boundary_x = center_x - R * np.cos(np.radians(90 - arc_angle/2))

# Draw the media boundary
ax.fill_between([-8, boundary_x], [-8, -8], [8, 8], color='lightblue', alpha=0.2)
ax.fill_between([boundary_x, 8], [-8, -8], [8, 8], color='lightgreen', alpha=0.2)
ax.axvline(x=boundary_x, color='black', linestyle='-', linewidth=1)

# Add labels for the media
ax.text(boundary_x-2, 6, f"n₁ = {n1}", fontsize=12)
ax.text(boundary_x+2, 6, f"n₂ = {n2}", fontsize=12)

# Mark object and image points
object_point = (boundary_x-3, 0)
image_point = (center_x+6, 0)
ax.plot(object_point[0], object_point[1], 'bo', markersize=8, label='Object (A)')
ax.plot(image_point[0], image_point[1], 'ro', markersize=8, label='Image (B)')

# Calculate different potential paths along the arc
theta_rad = np.linspace(np.radians(start_angle), np.radians(end_angle), 15)
paths = []
optical_lengths = []

for theta in theta_rad:
    # Position on the arc
    x = center_x + R * np.cos(theta)
    y = R * np.sin(theta)

    # Calculate distances
    d1 = np.sqrt((x - object_point[0])**2 + (y - object_point[1])**2)
    d2 = np.sqrt((x - image_point[0])**2 + (y - image_point[1])**2)

    # Calculate optical path length
    optical_length = n1 * d1 + n2 * d2

    paths.append((x, y))
    optical_lengths.append(optical_length)

# Find the minimum optical path
min_index = np.argmin(optical_lengths)
min_path = paths[min_index]

# Plot all potential paths
for i, (x, y) in enumerate(paths):
    if i == min_index:
        continue
    ax.plot([object_point[0], x, image_point[0]], [object_point[1], y, image_point[1]],
             'gray', linestyle='--', alpha=0.5, linewidth=0.8)

# Plot the path of minimum optical length (Fermat's principle)
ax.plot([object_point[0], min_path[0], image_point[0]], [object_point[1], min_path[1], image_point[1]],
         'red', linewidth=2, label='Minimum optical path')


# Set up the main plot
ax.set_xlim(-4, 12)
ax.set_ylim(-4, 4)
ax.set_xlabel('Position')
ax.set_ylabel('Height')
ax.grid(True, alpha=0.3)
ax.axhline(y=0, color='gray', linestyle='--', alpha=0.7)
ax.legend(loc='lower right')

plt.tight_layout()
plt.show()
```

Under the paraxial approximation, we can express coordinates using small-angle approximations. If we place the origin at the center of the spherical surface, with objects at distance $a$ from the surface and images at distance $b$, the minimization condition leads to:

$$n_1 \sin \theta_1 = n_2 \sin \theta_2$$

Where $\theta_1$ and $\theta_2$ are the angles with respect to the normal at point $P$.

Using the paraxial approximation $\sin \theta \approx \theta$ and geometric relations at the spherical surface, this simplifies to:

$$\frac{n_1}{a} + \frac{n_2}{b} = \frac{n_2-n_1}{R}$$

This is precisely the imaging equation for a spherical refracting surface that we derived earlier. The remarkable aspect is that Fermat's principle—the requirement that light follow the path of least time—naturally yields the same result as our geometric derivation.

### Deriving the Thin Lens Equation from Fermat's Principle

To derive the thin lens equation, we apply Fermat's principle to the two spherical surfaces that make up a lens. Consider a lens with refractive index $n_2$ in a medium of index $n_1$, with surface radii $R_1$ and $R_2$.

The total optical path for a ray passing through the lens at height $y$ from the optical axis is:
- Path from object to first surface: $n_1 s_1$
- Path through the lens: $n_2 s_2$
- Path from second surface to image: $n_1 s_3$

For a thin lens, the optical path length simplifies to:

$$L(y) = n_1 \sqrt{a^2 + y^2} + n_2 d(y) + n_1 \sqrt{b^2 + y^2}$$

Where $d(y)$ is the thickness of the lens at height $y$, which can be approximated as:

$$d(y) \approx d_0 + \frac{y^2}{2}\left(\frac{1}{R_1}-\frac{1}{R_2}\right)$$

Applying Fermat's principle ($\frac{dL}{dy} = 0$) and using the paraxial approximation:

$$\frac{n_1 y}{\sqrt{a^2 + y^2}} + n_2 y \left(\frac{1}{R_1}-\frac{1}{R_2}\right) + \frac{n_1 y}{\sqrt{b^2 + y^2}} = 0$$

In the paraxial limit ($y \ll a, y \ll b$), this becomes:

$$\frac{n_1 y}{a} + n_2 y \left(\frac{1}{R_1}-\frac{1}{R_2}\right) + \frac{n_1 y}{b} = 0$$

Dividing by $y$ and rearranging:

$$\frac{1}{a} + \frac{1}{b} = \frac{n_2-n_1}{n_1}\left(\frac{1}{R_1}-\frac{1}{R_2}\right) = \frac{1}{f}$$

This is the thin lens equation with the focal length given by the lensmaker's equation:

$$f = \frac{n_1}{n_2-n_1}\left(\frac{R_1 R_2}{R_2-R_1}\right)$$

Thus, both the imaging equation and the lensmaker equation emerge naturally from Fermat's principle applied to the geometry of a thin lens, showing that light follows paths of equal optical length from object to image when passing through any part of the lens.

From a wave perspective, what makes a lens focus light to a point is that all paths from object to image through any part of the lens have equal optical path lengths (to first order in the paraxial approximation), ensuring constructive interference at the image point.
